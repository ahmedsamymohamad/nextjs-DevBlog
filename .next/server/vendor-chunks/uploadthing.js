"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/uploadthing";
exports.ids = ["vendor-chunks/uploadthing"];
exports.modules = {

/***/ "(ssr)/./node_modules/uploadthing/dist/chunk-J63ZFLAK.mjs":
/*!**********************************************************!*\
  !*** ./node_modules/uploadthing/dist/chunk-J63ZFLAK.mjs ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   maybeParseResponseXML: () => (/* binding */ maybeParseResponseXML),\n/* harmony export */   uploadPart: () => (/* binding */ uploadPart),\n/* harmony export */   uploadPartWithProgress: () => (/* binding */ uploadPartWithProgress)\n/* harmony export */ });\n/* harmony import */ var _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @uploadthing/shared */ \"(ssr)/./node_modules/@uploadthing/shared/dist/index.mjs\");\n// src/internal/multi-part.ts\n\n// src/internal/s3-error-parser.ts\nvar maybeParseResponseXML = (maybeXml)=>{\n    const codeMatch = maybeXml.match(/<Code>(.*?)<\\/Code>/s);\n    const messageMatch = maybeXml.match(/<Message>(.*?)<\\/Message>/s);\n    const code = codeMatch == null ? void 0 : codeMatch[1];\n    const message = messageMatch == null ? void 0 : messageMatch[1];\n    if (!code || !message) return null;\n    return {\n        code: s3CodeToUploadThingCode[code] ?? DEFAULT_ERROR_CODE,\n        message\n    };\n};\nvar DEFAULT_ERROR_CODE = \"UPLOAD_FAILED\";\nvar s3CodeToUploadThingCode = {\n    AccessDenied: \"FORBIDDEN\",\n    // 403 Forbidden\n    EntityTooSmall: \"TOO_SMALL\",\n    // 400 Bad Request\n    EntityTooLarge: \"TOO_LARGE\",\n    // 400 Bad Request\n    ExpiredToken: \"FORBIDDEN\",\n    // 400 Bad Request\n    IncorrectNumberOfFilesInPostRequest: \"TOO_MANY_FILES\",\n    // 400 Bad Request\n    InternalError: \"INTERNAL_SERVER_ERROR\",\n    // 500 Internal Server Error\n    KeyTooLongError: \"KEY_TOO_LONG\",\n    // 400 Bad Request\n    MaxMessageLengthExceeded: \"TOO_LARGE\"\n};\n// src/internal/multi-part.ts\nasync function uploadPart(opts, retryCount = 0) {\n    const s3Res = await opts.fetch(opts.url, {\n        method: \"PUT\",\n        body: opts.chunk,\n        headers: {\n            \"Content-Type\": opts.contentType,\n            \"Content-Disposition\": [\n                opts.contentDisposition,\n                `filename=\"${opts.fileName}\"`,\n                `filename*=UTF-8''${opts.fileName}`\n            ].join(\"; \")\n        }\n    });\n    if (s3Res.ok) {\n        const etag = s3Res.headers.get(\"Etag\");\n        if (!etag) {\n            throw new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError({\n                code: \"UPLOAD_FAILED\",\n                message: \"Missing Etag header from uploaded part\"\n            });\n        }\n        return etag.replace(/\"/g, \"\");\n    }\n    if (retryCount < opts.maxRetries) {\n        const delay = 2 ** retryCount * 1e3;\n        await new Promise((r)=>setTimeout(r, delay));\n        return uploadPart(opts, retryCount++);\n    }\n    await opts.fetch((0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.generateUploadThingURL)(\"/api/failureCallback\"), {\n        method: \"POST\",\n        body: JSON.stringify({\n            fileKey: opts.key\n        }),\n        headers: opts.utRequestHeaders\n    });\n    const text = await s3Res.text();\n    const parsed = maybeParseResponseXML(text);\n    if (parsed == null ? void 0 : parsed.message) {\n        throw new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError({\n            code: \"UPLOAD_FAILED\",\n            message: parsed.message\n        });\n    }\n    throw new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError({\n        code: \"UPLOAD_FAILED\",\n        message: \"Failed to upload file to storage provider\",\n        cause: s3Res\n    });\n}\nasync function uploadPartWithProgress(opts, retryCount = 0) {\n    return new Promise((resolve, reject)=>{\n        const xhr = new XMLHttpRequest();\n        xhr.open(\"PUT\", opts.url, true);\n        xhr.setRequestHeader(\"Content-Type\", opts.fileType);\n        xhr.setRequestHeader(\"Content-Disposition\", [\n            opts.contentDisposition,\n            `filename=\"${opts.fileName}\"`,\n            `filename*=UTF-8''${opts.fileName}`\n        ].join(\"; \"));\n        xhr.onload = async ()=>{\n            if (xhr.status >= 200 && xhr.status < 300) {\n                const etag = xhr.getResponseHeader(\"Etag\");\n                etag ? resolve(etag) : reject(\"NO ETAG\");\n            } else if (retryCount < opts.maxRetries) {\n                const delay = Math.pow(2, retryCount) * 1e3;\n                await new Promise((res)=>setTimeout(res, delay));\n                await uploadPartWithProgress(opts, retryCount + 1);\n            } else {\n                reject(\"Max retries exceeded\");\n            }\n        };\n        let lastProgress = 0;\n        xhr.onerror = async ()=>{\n            lastProgress = 0;\n            if (retryCount < opts.maxRetries) {\n                const delay = Math.pow(2, retryCount) * 100;\n                await new Promise((res)=>setTimeout(res, delay));\n                await uploadPartWithProgress(opts, retryCount + 1);\n            } else {\n                reject(\"Max retries exceeded\");\n            }\n        };\n        xhr.upload.onprogress = (e)=>{\n            const delta = e.loaded - lastProgress;\n            lastProgress += delta;\n            opts.onProgress(delta);\n        };\n        xhr.send(opts.chunk);\n    });\n}\n //# sourceMappingURL=chunk-J63ZFLAK.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/uploadthing/dist/chunk-J63ZFLAK.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/uploadthing/dist/client.mjs":
/*!**************************************************!*\
  !*** ./node_modules/uploadthing/dist/client.mjs ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DANGEROUS__uploadFiles: () => (/* binding */ DANGEROUS__uploadFiles),\n/* harmony export */   INTERNAL_DO_NOT_USE__fatalClientError: () => (/* binding */ INTERNAL_DO_NOT_USE__fatalClientError),\n/* harmony export */   INTERNAL_doFormatting: () => (/* binding */ INTERNAL_doFormatting),\n/* harmony export */   allowedContentTextLabelGenerator: () => (/* binding */ allowedContentTextLabelGenerator),\n/* harmony export */   capitalizeStart: () => (/* binding */ capitalizeStart),\n/* harmony export */   classNames: () => (/* binding */ classNames),\n/* harmony export */   contentFieldToContent: () => (/* binding */ contentFieldToContent),\n/* harmony export */   genUploader: () => (/* binding */ genUploader),\n/* harmony export */   generateClientDropzoneAccept: () => (/* binding */ generateClientDropzoneAccept),\n/* harmony export */   generateMimeTypes: () => (/* binding */ generateMimeTypes),\n/* harmony export */   generatePermittedFileTypes: () => (/* binding */ generatePermittedFileTypes),\n/* harmony export */   getFullApiUrl: () => (/* binding */ getFullApiUrl),\n/* harmony export */   styleFieldToClassName: () => (/* binding */ styleFieldToClassName),\n/* harmony export */   styleFieldToCssObject: () => (/* binding */ styleFieldToCssObject)\n/* harmony export */ });\n/* harmony import */ var _chunk_J63ZFLAK_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chunk-J63ZFLAK.mjs */ \"(ssr)/./node_modules/uploadthing/dist/chunk-J63ZFLAK.mjs\");\n/* harmony import */ var _uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @uploadthing/shared */ \"(ssr)/./node_modules/@uploadthing/shared/dist/index.mjs\");\n\n// src/client.ts\n\n// src/internal/ut-reporter.ts\n\nvar createAPIRequestUrl = (config)=>{\n    const url = new URL(config.url);\n    const queryParams = new URLSearchParams(url.search);\n    queryParams.set(\"actionType\", config.actionType);\n    queryParams.set(\"slug\", config.slug);\n    url.search = queryParams.toString();\n    return url;\n};\nvar createUTReporter = (cfg)=>{\n    return async (type, payload)=>{\n        const url = createAPIRequestUrl({\n            url: cfg.url,\n            slug: cfg.endpoint,\n            actionType: type\n        });\n        const response = await fetch(url, {\n            method: \"POST\",\n            body: JSON.stringify(payload),\n            headers: {\n                \"Content-Type\": \"application/json\"\n            }\n        });\n        switch(type){\n            case \"failure\":\n                {\n                    const p = payload;\n                    const parsed = (0,_chunk_J63ZFLAK_mjs__WEBPACK_IMPORTED_MODULE_0__.maybeParseResponseXML)(p.s3Error ?? \"\");\n                    if (parsed == null ? void 0 : parsed.message) {\n                        throw new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.UploadThingError({\n                            code: parsed.code,\n                            message: parsed.message\n                        });\n                    } else {\n                        throw new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.UploadThingError({\n                            code: \"UPLOAD_FAILED\",\n                            message: `Failed to upload file ${p.fileName} to S3`,\n                            cause: p.s3Error\n                        });\n                    }\n                }\n        }\n        return response.ok;\n    };\n};\n// src/internal/component-theming.ts\n\nvar generatePermittedFileTypes = (config)=>{\n    const fileTypes = config ? (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.objectKeys)(config) : [];\n    const maxFileCount = config ? Object.values(config).map((v)=>v.maxFileCount) : [];\n    return {\n        fileTypes,\n        multiple: maxFileCount.some((v)=>v && v > 1)\n    };\n};\nvar capitalizeStart = (str)=>{\n    return str.charAt(0).toUpperCase() + str.slice(1);\n};\nvar INTERNAL_doFormatting = (config)=>{\n    if (!config) return \"\";\n    const allowedTypes = (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.objectKeys)(config);\n    const formattedTypes = allowedTypes.map((f)=>f === \"blob\" ? \"file\" : f);\n    if (formattedTypes.length > 1) {\n        const lastType = formattedTypes.pop();\n        return `${formattedTypes.join(\"s, \")} and ${lastType}s`;\n    }\n    const key = allowedTypes[0];\n    const formattedKey = formattedTypes[0];\n    const { maxFileSize, maxFileCount } = config[key];\n    if (maxFileCount && maxFileCount > 1) {\n        return `${formattedKey}s up to ${maxFileSize}, max ${maxFileCount}`;\n    } else {\n        return `${formattedKey} (${maxFileSize})`;\n    }\n};\nvar allowedContentTextLabelGenerator = (config)=>{\n    return capitalizeStart(INTERNAL_doFormatting(config));\n};\nvar styleFieldToClassName = (styleField, args)=>{\n    if (typeof styleField === \"string\") return styleField;\n    if (typeof styleField === \"function\") {\n        const result = styleField(args);\n        if (typeof result === \"string\") return result;\n    }\n    return \"\";\n};\nvar styleFieldToCssObject = (styleField, args)=>{\n    if (typeof styleField === \"object\") return styleField;\n    if (typeof styleField === \"function\") {\n        const result = styleField(args);\n        if (typeof result === \"object\") return result;\n    }\n    return {};\n};\nvar contentFieldToContent = (contentField, arg)=>{\n    if (!contentField) return null;\n    if (typeof contentField !== \"function\") return contentField;\n    if (typeof contentField === \"function\") {\n        const result = contentField(arg);\n        return result;\n    }\n};\n// src/client.ts\nvar INTERNAL_DO_NOT_USE__fatalClientError = (e)=>new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.UploadThingError({\n        code: \"INTERNAL_CLIENT_ERROR\",\n        message: \"Something went wrong. Please report this to UploadThing.\",\n        cause: e\n    });\nvar DANGEROUS__uploadFiles = async (endpoint, opts)=>{\n    const reportEventToUT = createUTReporter({\n        endpoint: String(endpoint),\n        url: opts.url\n    });\n    const s3ConnectionRes = await fetch(createAPIRequestUrl({\n        url: opts.url,\n        slug: String(endpoint),\n        actionType: \"upload\"\n    }), {\n        method: \"POST\",\n        body: JSON.stringify({\n            input: \"input\" in opts ? opts.input : null,\n            files: opts.files.map((f)=>({\n                    name: f.name,\n                    size: f.size\n                }))\n        }),\n        // Express requires Content-Type to be explicitly set to parse body properly\n        headers: {\n            \"Content-Type\": \"application/json\"\n        }\n    }).then(async (res)=>{\n        if (!res.ok) {\n            const error = await _uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.UploadThingError.fromResponse(res);\n            throw error;\n        }\n        const jsonOrError = await (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.safeParseJSON)(res);\n        if (jsonOrError instanceof Error) {\n            throw new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.UploadThingError({\n                code: \"BAD_REQUEST\",\n                message: jsonOrError.message,\n                cause: res\n            });\n        }\n        return jsonOrError;\n    });\n    if (!s3ConnectionRes || !Array.isArray(s3ConnectionRes)) {\n        throw new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.UploadThingError({\n            code: \"BAD_REQUEST\",\n            message: \"No URL. How did you even get here?\",\n            cause: s3ConnectionRes\n        });\n    }\n    const fileUploadPromises = s3ConnectionRes.map(async (presigned)=>{\n        const file = opts.files.find((f)=>f.name === presigned.fileName);\n        if (!file) {\n            console.error(\"No file found for presigned URL\", presigned);\n            throw new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.UploadThingError({\n                code: \"NOT_FOUND\",\n                message: \"No file found for presigned URL\",\n                cause: `Expected file with name ${presigned.fileName} but got '${opts.files.join(\",\")}'`\n            });\n        }\n        const { presignedUrls, uploadId, chunkSize, contentDisposition, key, pollingUrl, pollingJwt } = presigned;\n        let uploadedBytes = 0;\n        let etags;\n        try {\n            etags = await Promise.all(presignedUrls.map(async (url, index)=>{\n                const offset = chunkSize * index;\n                const end = Math.min(offset + chunkSize, file.size);\n                const chunk = file.slice(offset, end);\n                const etag = await (0,_chunk_J63ZFLAK_mjs__WEBPACK_IMPORTED_MODULE_0__.uploadPartWithProgress)({\n                    url,\n                    chunk,\n                    contentDisposition,\n                    fileType: file.type,\n                    fileName: file.name,\n                    maxRetries: 10,\n                    onProgress: (delta)=>{\n                        var _a;\n                        uploadedBytes += delta;\n                        const percent = uploadedBytes / file.size * 100;\n                        (_a = opts.onUploadProgress) == null ? void 0 : _a.call(opts, {\n                            file: file.name,\n                            progress: percent\n                        });\n                    }\n                });\n                return {\n                    tag: etag,\n                    partNumber: index + 1\n                };\n            }));\n        } catch (error) {\n            await reportEventToUT(\"failure\", {\n                fileKey: key,\n                uploadId,\n                fileName: file.name,\n                s3Error: error.toString()\n            });\n            throw \"unreachable\";\n        }\n        const uploadOk = await reportEventToUT(\"multipart-complete\", {\n            uploadId,\n            fileKey: key,\n            etags\n        });\n        if (!uploadOk) {\n            console.log(\"Failed to alert UT of upload completion\");\n            throw new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.UploadThingError({\n                code: \"UPLOAD_FAILED\",\n                message: \"Failed to alert UT of upload completion\"\n            });\n        }\n        await new Promise((r)=>setTimeout(r, 750));\n        const serverData = await (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_1__.withExponentialBackoff)(async ()=>{\n            const res = await fetch(pollingUrl, {\n                headers: {\n                    authorization: pollingJwt\n                }\n            }).then((r)=>r.json());\n            return res.status === \"done\" ? res.callbackData : void 0;\n        });\n        return {\n            name: file.name,\n            size: file.size,\n            key: presigned.key,\n            serverData,\n            url: \"https://utfs.io/f/\" + key\n        };\n    });\n    return Promise.all(fileUploadPromises);\n};\nvar genUploader = (initOpts)=>{\n    const url = (initOpts == null ? void 0 : initOpts.url) instanceof URL ? initOpts.url : getFullApiUrl(initOpts == null ? void 0 : initOpts.url);\n    return (endpoint, opts)=>// eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n        DANGEROUS__uploadFiles(endpoint, {\n            ...opts,\n            url\n        });\n};\nvar classNames = (...classes)=>{\n    return classes.filter(Boolean).join(\" \");\n};\nvar generateMimeTypes = (fileTypes)=>{\n    const accepted = fileTypes.map((type)=>{\n        if (type === \"blob\") return \"blob\";\n        if (type === \"pdf\") return \"application/pdf\";\n        if (type.includes(\"/\")) return type;\n        else return `${type}/*`;\n    });\n    if (accepted.includes(\"blob\")) {\n        return void 0;\n    }\n    return accepted;\n};\nvar generateClientDropzoneAccept = (fileTypes)=>{\n    const mimeTypes = generateMimeTypes(fileTypes);\n    if (!mimeTypes) return void 0;\n    return Object.fromEntries(mimeTypes.map((type)=>[\n            type,\n            []\n        ]));\n};\nfunction getFullApiUrl(maybeUrl) {\n    const base = (()=>{\n        var _a, _b;\n        if (false) {}\n        if (typeof process !== \"undefined\" && ((_a = process == null ? void 0 : process.env) == null ? void 0 : _a.VERCEL_URL)) {\n            return `https://${process.env.VERCEL_URL}`;\n        }\n        if ((_b = /* unsupported import.meta.env */ undefined) == null ? void 0 : _b.VERCEL_URL) {\n            return `https://${/* unsupported import.meta.env.VERCEL_URL */ undefined.VERCEL_URL}`;\n        }\n        return \"http://localhost:3000\";\n    })();\n    try {\n        const url = new URL(maybeUrl ?? \"/api/uploadthing\", base);\n        if (url.pathname === \"/\") {\n            url.pathname = \"/api/uploadthing\";\n        }\n        return url;\n    } catch (err) {\n        throw new Error(`Failed to parse '${maybeUrl}' as a URL. Make sure it's a valid URL or path`);\n    }\n}\n //# sourceMappingURL=client.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/uploadthing/dist/client.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/uploadthing/dist/chunk-ECKEB4E7.mjs":
/*!**********************************************************!*\
  !*** ./node_modules/uploadthing/dist/chunk-ECKEB4E7.mjs ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   UPLOADTHING_VERSION: () => (/* binding */ UPLOADTHING_VERSION),\n/* harmony export */   VALID_ACTION_TYPES: () => (/* binding */ VALID_ACTION_TYPES),\n/* harmony export */   buildPermissionsInfoHandler: () => (/* binding */ buildPermissionsInfoHandler),\n/* harmony export */   buildRequestHandler: () => (/* binding */ buildRequestHandler),\n/* harmony export */   createBuilder: () => (/* binding */ createBuilder),\n/* harmony export */   defaultErrorFormatter: () => (/* binding */ defaultErrorFormatter),\n/* harmony export */   formatError: () => (/* binding */ formatError),\n/* harmony export */   unsetMarker: () => (/* binding */ unsetMarker)\n/* harmony export */ });\n/* harmony import */ var _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @uploadthing/shared */ \"(rsc)/./node_modules/@uploadthing/shared/dist/index.mjs\");\n// package.json\nvar package_default = {\n    name: \"uploadthing\",\n    version: \"6.0.3\",\n    engines: {\n        node: \">=18.13.0\"\n    },\n    license: \"MIT\",\n    exports: {\n        \"./package.json\": \"./package.json\",\n        \"./client\": {\n            types: \"./dist/client.d.ts\",\n            import: \"./dist/client.mjs\",\n            require: \"./dist/client.js\"\n        },\n        \"./server\": {\n            types: \"./dist/server.d.ts\",\n            import: \"./dist/server.mjs\",\n            require: \"./dist/server.js\"\n        },\n        \"./next\": {\n            types: \"./dist/next.d.ts\",\n            import: \"./dist/next.mjs\",\n            require: \"./dist/next.js\"\n        },\n        \"./next-legacy\": {\n            types: \"./dist/next-legacy.d.ts\",\n            import: \"./dist/next-legacy.mjs\",\n            require: \"./dist/next-legacy.js\"\n        },\n        \"./express\": {\n            import: \"./dist/express.mjs\",\n            types: \"./dist/express.d.ts\",\n            require: \"./dist/express.js\"\n        },\n        \"./tw\": {\n            types: \"./dist/tw.d.ts\",\n            import: \"./dist/tw.mjs\",\n            require: \"./dist/tw.js\"\n        },\n        \"./fastify\": {\n            types: \"./dist/fastify.d.ts\",\n            import: \"./dist/fastify.mjs\",\n            require: \"./dist/fastify.js\"\n        },\n        \"./h3\": {\n            types: \"./dist/h3.d.ts\",\n            import: \"./dist/h3.mjs\",\n            require: \"./dist/h3.js\"\n        }\n    },\n    files: [\n        \"dist\"\n    ],\n    publishConfig: {\n        access: \"public\"\n    },\n    typesVersions: {\n        \"*\": {\n            client: [\n                \"dist/client.d.ts\"\n            ],\n            server: [\n                \"dist/server.d.ts\"\n            ],\n            next: [\n                \"dist/next.d.ts\"\n            ],\n            \"next-legacy\": [\n                \"dist/next-legacy.d.ts\"\n            ],\n            tw: [\n                \"dist/tw.d.ts\"\n            ],\n            express: [\n                \"dist/express.d.ts\"\n            ],\n            fastify: [\n                \"dist/fastify.d.ts\"\n            ],\n            h3: [\n                \"dist/h3.d.ts\"\n            ]\n        }\n    },\n    scripts: {\n        lint: 'eslint \"**/*.{ts,tsx}\" --max-warnings 0',\n        build: \"tsup\",\n        clean: \"git clean -xdf dist node_modules\",\n        dev: \"tsup --watch\",\n        test: \"vitest run\",\n        \"test:watch\": \"vitest\",\n        typecheck: \"tsc --noEmit\"\n    },\n    dependencies: {\n        \"@uploadthing/mime-types\": \"^0.2.2\",\n        \"@uploadthing/shared\": \"^6.0.2\"\n    },\n    devDependencies: {\n        \"@types/express\": \"^4.17.17\",\n        \"@types/react\": \"18.2.33\",\n        \"@uploadthing/eslint-config\": \"0.2.0\",\n        \"@uploadthing/tsconfig\": \"0.1.0\",\n        \"@uploadthing/tsup-config\": \"0.1.0\",\n        eslint: \"^8.47.0\",\n        express: \"^4.18.2\",\n        fastify: \"^4.23.2\",\n        h3: \"^1.8.1\",\n        next: \"14.0.1\",\n        \"solid-js\": \"^1.7.11\",\n        tailwindcss: \"^3.3.2\",\n        tsup: \"6.7.0\",\n        \"type-fest\": \"^3.11.1\",\n        typescript: \"^5.1.6\",\n        undici: \"^5.20.0\",\n        vitest: \"^0.30.1\",\n        zod: \"^3.22.3\"\n    },\n    eslintConfig: {\n        root: true,\n        extends: [\n            \"@uploadthing/eslint-config/base\"\n        ]\n    }\n};\n// src/constants.ts\nif (!package_default.version) throw new Error(\"no version found in package.json\");\nvar UPLOADTHING_VERSION = package_default.version;\n// src/internal/error-formatter.ts\nfunction defaultErrorFormatter(error) {\n    return {\n        message: error.message\n    };\n}\nfunction formatError(error, router) {\n    var _a;\n    const errorFormatter = ((_a = router[Object.keys(router)[0]]) == null ? void 0 : _a._def.errorFormatter) ?? defaultErrorFormatter;\n    return errorFormatter(error);\n}\n// src/internal/types.ts\nvar unsetMarker = \"unsetMarker\";\nvar VALID_ACTION_TYPES = [\n    \"upload\",\n    \"failure\",\n    \"multipart-complete\"\n];\n// src/internal/handler.ts\n\n// src/internal/dev-hook.ts\n\nvar isValidResponse = (response)=>{\n    if (!response.ok) return false;\n    if (response.status >= 400) return false;\n    if (!response.headers.has(\"x-uploadthing-version\")) return false;\n    return true;\n};\nvar conditionalDevServer = async (opts)=>{\n    if (false) {}\n    const fileData = await (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.pollForFileData)({\n        url: (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.generateUploadThingURL)(`/api/pollUpload/${opts.fileKey}`),\n        apiKey: opts.apiKey,\n        sdkVersion: UPLOADTHING_VERSION\n    }, async (json)=>{\n        const file = json.fileData;\n        let callbackUrl = file.callbackUrl + `?slug=${file.callbackSlug}`;\n        if (!callbackUrl.startsWith(\"http\")) callbackUrl = \"http://\" + callbackUrl;\n        console.log(\"[UT] SIMULATING FILE UPLOAD WEBHOOK CALLBACK\", callbackUrl);\n        const response = await fetch(callbackUrl, {\n            method: \"POST\",\n            body: JSON.stringify({\n                status: \"uploaded\",\n                metadata: JSON.parse(file.metadata ?? \"{}\"),\n                file: {\n                    url: `https://utfs.io/f/${encodeURIComponent(opts.fileKey)}`,\n                    key: opts.fileKey,\n                    name: file.fileName,\n                    size: file.fileSize\n                }\n            }),\n            headers: {\n                \"uploadthing-hook\": \"callback\"\n            }\n        });\n        if (isValidResponse(response)) {\n            console.log(\"[UT] Successfully simulated callback for file\", opts.fileKey);\n        } else {\n            console.error(\"[UT] Failed to simulate callback for file. Is your webhook configured correctly?\", opts.fileKey);\n        }\n        return file;\n    });\n    if (fileData !== void 0) return fileData;\n    console.error(`[UT] Failed to simulate callback for file ${opts.fileKey}`);\n    throw new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError({\n        code: \"UPLOAD_FAILED\",\n        message: \"File took too long to upload\"\n    });\n};\n// src/internal/parser.ts\nfunction getParseFn(parser) {\n    if (typeof parser.parse === \"function\") {\n        return parser.parse;\n    }\n    throw new Error(\"Invalid parser\");\n}\n// src/internal/handler.ts\nvar createUTFetch = (apiKey)=>{\n    return async (endpoint, payload)=>{\n        const response = await fetch((0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.generateUploadThingURL)(endpoint), {\n            method: \"POST\",\n            body: JSON.stringify(payload),\n            headers: {\n                \"Content-Type\": \"application/json\",\n                \"x-uploadthing-api-key\": apiKey,\n                \"x-uploadthing-version\": UPLOADTHING_VERSION\n            }\n        });\n        return response;\n    };\n};\nvar fileCountLimitHit = (files, routeConfig)=>{\n    var _a;\n    const counts = {};\n    files.forEach((file)=>{\n        const type = (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.getTypeFromFileName)(file.name, (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.objectKeys)(routeConfig));\n        if (!counts[type]) {\n            counts[type] = 1;\n        } else {\n            counts[type] += 1;\n        }\n    });\n    for(const _key in counts){\n        const key = _key;\n        const count = counts[key];\n        const limit = (_a = routeConfig[key]) == null ? void 0 : _a.maxFileCount;\n        if (!limit) {\n            console.error(routeConfig, key);\n            throw new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError({\n                code: \"BAD_REQUEST\",\n                message: \"Invalid config during file count\",\n                cause: `Expected route config to have a maxFileCount for key ${key} but none was found.`\n            });\n        }\n        if (count > limit) {\n            return {\n                limitHit: true,\n                type: key,\n                limit,\n                count\n            };\n        }\n    }\n    return {\n        limitHit: false\n    };\n};\nvar getHeader = (req, key)=>{\n    if (req.headers instanceof Headers) {\n        return req.headers.get(key);\n    }\n    return req.headers[key];\n};\nvar buildRequestHandler = (opts)=>{\n    return async (input)=>{\n        var _a;\n        if (true) {\n            console.log(\"[UT] UploadThing dev server is now running!\");\n        }\n        const { req, res, event } = input;\n        const { router, config } = opts;\n        const preferredOrEnvSecret = (config == null ? void 0 : config.uploadthingSecret) ?? process.env.UPLOADTHING_SECRET;\n        let url;\n        try {\n            url = new URL(input.url ?? req.url ?? \"\");\n        } catch (error) {\n            return new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError({\n                code: \"BAD_REQUEST\",\n                message: `Invalid url '${((_a = input.url) == null ? void 0 : _a.href) ?? req.url}'`,\n                cause: error\n            });\n        }\n        const params = url.searchParams;\n        const uploadthingHook = getHeader(req, \"uploadthing-hook\") ?? void 0;\n        const slug = params.get(\"slug\") ?? void 0;\n        const actionType = params.get(\"actionType\") ?? void 0;\n        if (!slug) return new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError({\n            code: \"BAD_REQUEST\",\n            message: \"No slug provided\"\n        });\n        if (slug && typeof slug !== \"string\") {\n            return new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError({\n                code: \"BAD_REQUEST\",\n                message: \"`slug` must be a string\",\n                cause: `Expected slug to be of type 'string', got '${typeof slug}'`\n            });\n        }\n        if (actionType && typeof actionType !== \"string\") {\n            return new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError({\n                code: \"BAD_REQUEST\",\n                message: \"`actionType` must be a string\",\n                cause: `Expected actionType to be of type 'string', got '${typeof actionType}'`\n            });\n        }\n        if (uploadthingHook && typeof uploadthingHook !== \"string\") {\n            return new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError({\n                code: \"BAD_REQUEST\",\n                message: \"`uploadthingHook` must be a string\",\n                cause: `Expected uploadthingHook to be of type 'string', got '${typeof uploadthingHook}'`\n            });\n        }\n        if (!preferredOrEnvSecret) {\n            return new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError({\n                code: \"BAD_REQUEST\",\n                message: `Please set your preferred secret in ${slug} router's config or set UPLOADTHING_SECRET in your env file`,\n                cause: \"No secret provided\"\n            });\n        }\n        const uploadable = router[slug];\n        if (!uploadable) {\n            return new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError({\n                code: \"NOT_FOUND\",\n                message: `No file route found for slug ${slug}`\n            });\n        }\n        const utFetch = createUTFetch(preferredOrEnvSecret);\n        if (uploadthingHook === \"callback\") {\n            const maybeReqBody = await (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.safeParseJSON)(req);\n            if (maybeReqBody instanceof Error) {\n                return new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError({\n                    code: \"BAD_REQUEST\",\n                    message: \"Invalid request body\",\n                    cause: maybeReqBody\n                });\n            }\n            const res2 = await uploadable.resolver({\n                file: maybeReqBody.file,\n                metadata: maybeReqBody.metadata\n            });\n            await utFetch(\"/api/serverCallback\", {\n                fileKey: maybeReqBody.file.key,\n                callbackData: res2 ?? null\n            });\n            return {\n                status: 200\n            };\n        }\n        if (!actionType || !VALID_ACTION_TYPES.includes(actionType)) {\n            return new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError({\n                code: \"BAD_REQUEST\",\n                cause: `Invalid action type ${actionType}`,\n                message: `Expected ${VALID_ACTION_TYPES.map((x)=>`\"${x}\"`).join(\", \").replace(/,(?!.*,)/, \" or\")} but got \"${\"a\"}\"`\n            });\n        }\n        switch(actionType){\n            case \"upload\":\n                {\n                    const maybeInput = await (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.safeParseJSON)(req);\n                    if (maybeInput instanceof Error) {\n                        return new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError({\n                            code: \"BAD_REQUEST\",\n                            message: \"Invalid request body\",\n                            cause: maybeInput\n                        });\n                    }\n                    const { files, input: userInput } = maybeInput;\n                    let parsedInput = {};\n                    try {\n                        const inputParser = uploadable._def.inputParser;\n                        parsedInput = await getParseFn(inputParser)(userInput);\n                    } catch (error) {\n                        console.error(error);\n                        return new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError({\n                            code: \"BAD_REQUEST\",\n                            message: \"Invalid input.\",\n                            cause: error\n                        });\n                    }\n                    let metadata = {};\n                    try {\n                        metadata = await uploadable._def.middleware({\n                            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                            req,\n                            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                            res,\n                            event,\n                            input: parsedInput\n                        });\n                    } catch (error) {\n                        console.error(error);\n                        return new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError({\n                            code: \"INTERNAL_SERVER_ERROR\",\n                            message: \"Failed to run middleware.\",\n                            cause: error\n                        });\n                    }\n                    if (!Array.isArray(files) || !files.every((f)=>(0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.isObject)(f) && typeof f.name === \"string\" && typeof f.size === \"number\")) return new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError({\n                        code: \"BAD_REQUEST\",\n                        message: \"Files must be an array of objects with name and size\",\n                        cause: `Expected files to be of type '{name:string, size:number}[]', got '${JSON.stringify(files)}'`\n                    });\n                    let parsedConfig;\n                    try {\n                        parsedConfig = (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.fillInputRouteConfig)(uploadable._def.routerConfig);\n                    } catch (error) {\n                        console.error(error);\n                        return new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError({\n                            code: \"BAD_REQUEST\",\n                            message: \"Invalid config.\",\n                            cause: error\n                        });\n                    }\n                    try {\n                        const { limitHit, count, limit, type } = fileCountLimitHit(files, parsedConfig);\n                        if (limitHit) {\n                            return new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError({\n                                code: \"BAD_REQUEST\",\n                                message: \"File limit exceeded\",\n                                cause: `You uploaded ${count} files of type '${type}', but the limit for that type is ${limit}`\n                            });\n                        }\n                    } catch (error) {\n                        console.error(error);\n                        return new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError({\n                            code: \"BAD_REQUEST\",\n                            message: \"Invalid config.\",\n                            cause: error\n                        });\n                    }\n                    const callbackUrl = url.origin + url.pathname;\n                    const uploadthingApiResponse = await utFetch(\"/api/prepareUpload\", {\n                        files,\n                        routeConfig: parsedConfig,\n                        metadata,\n                        callbackUrl: (config == null ? void 0 : config.callbackUrl) ?? callbackUrl,\n                        callbackSlug: slug\n                    });\n                    const parsedResponse = await (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.safeParseJSON)(uploadthingApiResponse);\n                    if (!uploadthingApiResponse.ok || parsedResponse instanceof Error) {\n                        console.error(\"[UT] unable to get presigned urls\");\n                        return new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError({\n                            code: \"URL_GENERATION_FAILED\",\n                            message: \"Unable to get presigned urls\",\n                            cause: parsedResponse\n                        });\n                    }\n                    if (true) {\n                        for (const file of parsedResponse){\n                            void conditionalDevServer({\n                                fileKey: file.key,\n                                apiKey: preferredOrEnvSecret\n                            });\n                        }\n                    }\n                    return {\n                        body: parsedResponse.map((x)=>({\n                                ...x,\n                                pollingUrl: (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.generateUploadThingURL)(`/api/serverCallback`)\n                            })),\n                        status: 200\n                    };\n                }\n            case \"multipart-complete\":\n                {\n                    const maybeReqBody = await (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.safeParseJSON)(req);\n                    if (maybeReqBody instanceof Error) {\n                        return new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError({\n                            code: \"BAD_REQUEST\",\n                            message: \"Invalid request body\",\n                            cause: maybeReqBody\n                        });\n                    }\n                    const completeRes = await utFetch(\"/api/completeMultipart\", {\n                        fileKey: maybeReqBody.fileKey,\n                        uploadId: maybeReqBody.uploadId,\n                        etags: maybeReqBody.etags\n                    });\n                    if (!completeRes.ok) {\n                        return new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError({\n                            code: \"UPLOAD_FAILED\",\n                            message: \"Failed to complete multipart upload\"\n                        });\n                    }\n                    return {\n                        status: 200\n                    };\n                }\n            case \"failure\":\n                {\n                    const maybeReqBody = await (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.safeParseJSON)(req);\n                    if (maybeReqBody instanceof Error) {\n                        return new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError({\n                            code: \"BAD_REQUEST\",\n                            message: \"Invalid request body\",\n                            cause: maybeReqBody\n                        });\n                    }\n                    const { fileKey, uploadId } = maybeReqBody;\n                    const uploadthingApiResponse = await utFetch(\"/api/failureCallback\", {\n                        fileKey,\n                        uploadId\n                    });\n                    if (!uploadthingApiResponse.ok) {\n                        console.error(\"[UT] failed to mark upload as failed\");\n                        const parsedResponse = await (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.safeParseJSON)(uploadthingApiResponse);\n                        return new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError({\n                            code: \"URL_GENERATION_FAILED\",\n                            message: \"Unable to get presigned urls\",\n                            cause: parsedResponse\n                        });\n                    }\n                    try {\n                        uploadable._def.onUploadError({\n                            error: new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError({\n                                code: \"UPLOAD_FAILED\",\n                                message: `Upload failed for ${fileKey}`\n                            }),\n                            fileKey\n                        });\n                    } catch (error) {\n                        console.error(\"[UT] Failed to run onUploadError callback. You probably shouldn't be throwing errors in your callback.\");\n                        console.error(error);\n                        return new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError({\n                            code: \"INTERNAL_SERVER_ERROR\",\n                            message: \"Failed to run onUploadError callback\",\n                            cause: error\n                        });\n                    }\n                    return {\n                        status: 200\n                    };\n                }\n            default:\n                {\n                    return new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError({\n                        code: \"BAD_REQUEST\",\n                        message: `Invalid action type`\n                    });\n                }\n        }\n    };\n};\nvar buildPermissionsInfoHandler = (opts)=>{\n    return ()=>{\n        const r = opts.router;\n        const permissions = Object.keys(r).map((k)=>{\n            const route = r[k];\n            const config = (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.fillInputRouteConfig)(route._def.routerConfig);\n            return {\n                slug: k,\n                config\n            };\n        });\n        return permissions;\n    };\n};\n// src/internal/upload-builder.ts\nfunction internalCreateBuilder(initDef = {}) {\n    const _def = {\n        // Default router config\n        routerConfig: {\n            image: {\n                maxFileSize: \"4MB\"\n            }\n        },\n        inputParser: {\n            parse: ()=>({}),\n            _input: {},\n            _output: {}\n        },\n        middleware: ()=>({}),\n        onUploadError: ()=>({}),\n        errorFormatter: initDef.errorFormatter ?? defaultErrorFormatter,\n        // Overload with properties passed in\n        ...initDef\n    };\n    return {\n        input (userParser) {\n            return internalCreateBuilder({\n                ..._def,\n                inputParser: userParser\n            });\n        },\n        middleware (userMiddleware) {\n            return internalCreateBuilder({\n                ..._def,\n                middleware: userMiddleware\n            });\n        },\n        onUploadComplete (userUploadComplete) {\n            return {\n                _def,\n                resolver: userUploadComplete\n            };\n        },\n        onUploadError (userOnUploadError) {\n            return internalCreateBuilder({\n                ..._def,\n                onUploadError: userOnUploadError\n            });\n        }\n    };\n}\nfunction createBuilder(opts) {\n    return (input)=>{\n        return internalCreateBuilder({\n            routerConfig: input,\n            ...opts\n        });\n    };\n}\n //# sourceMappingURL=chunk-ECKEB4E7.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvdXBsb2FkdGhpbmcvZGlzdC9jaHVuay1FQ0tFQjRFNy5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQUEsZUFBZTtBQUNmLElBQUlBLGtCQUFrQjtJQUNwQkMsTUFBTTtJQUNOQyxTQUFTO0lBQ1RDLFNBQVM7UUFDUEMsTUFBTTtJQUNSO0lBQ0FDLFNBQVM7SUFDVEMsU0FBUztRQUNQLGtCQUFrQjtRQUNsQixZQUFZO1lBQ1ZDLE9BQU87WUFDUEMsUUFBUTtZQUNSQyxTQUFTO1FBQ1g7UUFDQSxZQUFZO1lBQ1ZGLE9BQU87WUFDUEMsUUFBUTtZQUNSQyxTQUFTO1FBQ1g7UUFDQSxVQUFVO1lBQ1JGLE9BQU87WUFDUEMsUUFBUTtZQUNSQyxTQUFTO1FBQ1g7UUFDQSxpQkFBaUI7WUFDZkYsT0FBTztZQUNQQyxRQUFRO1lBQ1JDLFNBQVM7UUFDWDtRQUNBLGFBQWE7WUFDWEQsUUFBUTtZQUNSRCxPQUFPO1lBQ1BFLFNBQVM7UUFDWDtRQUNBLFFBQVE7WUFDTkYsT0FBTztZQUNQQyxRQUFRO1lBQ1JDLFNBQVM7UUFDWDtRQUNBLGFBQWE7WUFDWEYsT0FBTztZQUNQQyxRQUFRO1lBQ1JDLFNBQVM7UUFDWDtRQUNBLFFBQVE7WUFDTkYsT0FBTztZQUNQQyxRQUFRO1lBQ1JDLFNBQVM7UUFDWDtJQUNGO0lBQ0FDLE9BQU87UUFDTDtLQUNEO0lBQ0RDLGVBQWU7UUFDYkMsUUFBUTtJQUNWO0lBQ0FDLGVBQWU7UUFDYixLQUFLO1lBQ0hDLFFBQVE7Z0JBQ047YUFDRDtZQUNEQyxRQUFRO2dCQUNOO2FBQ0Q7WUFDREMsTUFBTTtnQkFDSjthQUNEO1lBQ0QsZUFBZTtnQkFDYjthQUNEO1lBQ0RDLElBQUk7Z0JBQ0Y7YUFDRDtZQUNEQyxTQUFTO2dCQUNQO2FBQ0Q7WUFDREMsU0FBUztnQkFDUDthQUNEO1lBQ0RDLElBQUk7Z0JBQ0Y7YUFDRDtRQUNIO0lBQ0Y7SUFDQUMsU0FBUztRQUNQQyxNQUFNO1FBQ05DLE9BQU87UUFDUEMs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QWUsSUFBTyxFQUFDO1FBQ3ZCckgsZ0JBQWdCNEgsUUFBUTVILGNBQWMsSUFBSU47UUFDMUMscUNBQXFDO1FBQ3JDLEdBQUdrSSxPQUFPO0lBQ1o7SUFDQSxPQUFPO1FBQ0xwRCxPQUFNeUQsVUFBVTtZQUNkLE9BQU9OLHNCQUFzQjtnQkFDM0IsR0FBR3hILElBQUk7Z0JBQ1BrRyxhQUFhNEI7WUFDZjtRQUNGO1FBQ0EzQixZQUFXNEIsY0FBYztZQUN2QixPQUFPUCxzQkFBc0I7Z0JBQzNCLEdBQUd4SCxJQUFJO2dCQUNQbUcsWUFBWTRCO1lBQ2Q7UUFDRjtRQUNBQyxrQkFBaUJDLGtCQUFrQjtZQUNqQyxPQUFPO2dCQUNMakk7Z0JBQ0F3RixVQUFVeUM7WUFDWjtRQUNGO1FBQ0FmLGVBQWNnQixpQkFBaUI7WUFDN0IsT0FBT1Ysc0JBQXNCO2dCQUMzQixHQUFHeEgsSUFBSTtnQkFDUGtILGVBQWVnQjtZQUNqQjtRQUNGO0lBQ0Y7QUFDRjtBQUNBLFNBQVNDLGNBQWM5RyxJQUFJO0lBQ3pCLE9BQU8sQ0FBQ2dEO1FBQ04sT0FBT21ELHNCQUFzQjtZQUMzQmYsY0FBY3BDO1lBQ2QsR0FBR2hELElBQUk7UUFDVDtJQUNGO0FBQ0Y7QUFXRSxDQUNGLDJDQUEyQyIsInNvdXJjZXMiOlsid2VicGFjazovL2Jsb2dnaW5nLWFwcC8uL25vZGVfbW9kdWxlcy91cGxvYWR0aGluZy9kaXN0L2NodW5rLUVDS0VCNEU3Lm1qcz84ZWU5Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIHBhY2thZ2UuanNvblxudmFyIHBhY2thZ2VfZGVmYXVsdCA9IHtcbiAgbmFtZTogXCJ1cGxvYWR0aGluZ1wiLFxuICB2ZXJzaW9uOiBcIjYuMC4zXCIsXG4gIGVuZ2luZXM6IHtcbiAgICBub2RlOiBcIj49MTguMTMuMFwiXG4gIH0sXG4gIGxpY2Vuc2U6IFwiTUlUXCIsXG4gIGV4cG9ydHM6IHtcbiAgICBcIi4vcGFja2FnZS5qc29uXCI6IFwiLi9wYWNrYWdlLmpzb25cIixcbiAgICBcIi4vY2xpZW50XCI6IHtcbiAgICAgIHR5cGVzOiBcIi4vZGlzdC9jbGllbnQuZC50c1wiLFxuICAgICAgaW1wb3J0OiBcIi4vZGlzdC9jbGllbnQubWpzXCIsXG4gICAgICByZXF1aXJlOiBcIi4vZGlzdC9jbGllbnQuanNcIlxuICAgIH0sXG4gICAgXCIuL3NlcnZlclwiOiB7XG4gICAgICB0eXBlczogXCIuL2Rpc3Qvc2VydmVyLmQudHNcIixcbiAgICAgIGltcG9ydDogXCIuL2Rpc3Qvc2VydmVyLm1qc1wiLFxuICAgICAgcmVxdWlyZTogXCIuL2Rpc3Qvc2VydmVyLmpzXCJcbiAgICB9LFxuICAgIFwiLi9uZXh0XCI6IHtcbiAgICAgIHR5cGVzOiBcIi4vZGlzdC9uZXh0LmQudHNcIixcbiAgICAgIGltcG9ydDogXCIuL2Rpc3QvbmV4dC5tanNcIixcbiAgICAgIHJlcXVpcmU6IFwiLi9kaXN0L25leHQuanNcIlxuICAgIH0sXG4gICAgXCIuL25leHQtbGVnYWN5XCI6IHtcbiAgICAgIHR5cGVzOiBcIi4vZGlzdC9uZXh0LWxlZ2FjeS5kLnRzXCIsXG4gICAgICBpbXBvcnQ6IFwiLi9kaXN0L25leHQtbGVnYWN5Lm1qc1wiLFxuICAgICAgcmVxdWlyZTogXCIuL2Rpc3QvbmV4dC1sZWdhY3kuanNcIlxuICAgIH0sXG4gICAgXCIuL2V4cHJlc3NcIjoge1xuICAgICAgaW1wb3J0OiBcIi4vZGlzdC9leHByZXNzLm1qc1wiLFxuICAgICAgdHlwZXM6IFwiLi9kaXN0L2V4cHJlc3MuZC50c1wiLFxuICAgICAgcmVxdWlyZTogXCIuL2Rpc3QvZXhwcmVzcy5qc1wiXG4gICAgfSxcbiAgICBcIi4vdHdcIjoge1xuICAgICAgdHlwZXM6IFwiLi9kaXN0L3R3LmQudHNcIixcbiAgICAgIGltcG9ydDogXCIuL2Rpc3QvdHcubWpzXCIsXG4gICAgICByZXF1aXJlOiBcIi4vZGlzdC90dy5qc1wiXG4gICAgfSxcbiAgICBcIi4vZmFzdGlmeVwiOiB7XG4gICAgICB0eXBlczogXCIuL2Rpc3QvZmFzdGlmeS5kLnRzXCIsXG4gICAgICBpbXBvcnQ6IFwiLi9kaXN0L2Zhc3RpZnkubWpzXCIsXG4gICAgICByZXF1aXJlOiBcIi4vZGlzdC9mYXN0aWZ5LmpzXCJcbiAgICB9LFxuICAgIFwiLi9oM1wiOiB7XG4gICAgICB0eXBlczogXCIuL2Rpc3QvaDMuZC50c1wiLFxuICAgICAgaW1wb3J0OiBcIi4vZGlzdC9oMy5tanNcIixcbiAgICAgIHJlcXVpcmU6IFwiLi9kaXN0L2gzLmpzXCJcbiAgICB9XG4gIH0sXG4gIGZpbGVzOiBbXG4gICAgXCJkaXN0XCJcbiAgXSxcbiAgcHVibGlzaENvbmZpZzoge1xuICAgIGFjY2VzczogXCJwdWJsaWNcIlxuICB9LFxuICB0eXBlc1ZlcnNpb25zOiB7XG4gICAgXCIqXCI6IHtcbiAgICAgIGNsaWVudDogW1xuICAgICAgICBcImRpc3QvY2xpZW50LmQudHNcIlxuICAgICAgXSxcbiAgICAgIHNlcnZlcjogW1xuICAgICAgICBcImRpc3Qvc2VydmVyLmQudHNcIlxuICAgICAgXSxcbiAgICAgIG5leHQ6IFtcbiAgICAgICAgXCJkaXN0L25leHQuZC50c1wiXG4gICAgICBdLFxuICAgICAgXCJuZXh0LWxlZ2FjeVwiOiBbXG4gICAgICAgIFwiZGlzdC9uZXh0LWxlZ2FjeS5kLnRzXCJcbiAgICAgIF0sXG4gICAgICB0dzogW1xuICAgICAgICBcImRpc3QvdHcuZC50c1wiXG4gICAgICBdLFxuICAgICAgZXhwcmVzczogW1xuICAgICAgICBcImRpc3QvZXhwcmVzcy5kLnRzXCJcbiAgICAgIF0sXG4gICAgICBmYXN0aWZ5OiBbXG4gICAgICAgIFwiZGlzdC9mYXN0aWZ5LmQudHNcIlxuICAgICAgXSxcbiAgICAgIGgzOiBbXG4gICAgICAgIFwiZGlzdC9oMy5kLnRzXCJcbiAgICAgIF1cbiAgICB9XG4gIH0sXG4gIHNjcmlwdHM6IHtcbiAgICBsaW50OiAnZXNsaW50IFwiKiovKi57dHMsdHN4fVwiIC0tbWF4LXdhcm5pbmdzIDAnLFxuICAgIGJ1aWxkOiBcInRzdXBcIixcbiAgICBjbGVhbjogXCJnaXQgY2xlYW4gLXhkZiBkaXN0IG5vZGVfbW9kdWxlc1wiLFxuICAgIGRldjogXCJ0c3VwIC0td2F0Y2hcIixcbiAgICB0ZXN0OiBcInZpdGVzdCBydW5cIixcbiAgICBcInRlc3Q6d2F0Y2hcIjogXCJ2aXRlc3RcIixcbiAgICB0eXBlY2hlY2s6IFwidHNjIC0tbm9FbWl0XCJcbiAgfSxcbiAgZGVwZW5kZW5jaWVzOiB7XG4gICAgXCJAdXBsb2FkdGhpbmcvbWltZS10eXBlc1wiOiBcIl4wLjIuMlwiLFxuICAgIFwiQHVwbG9hZHRoaW5nL3NoYXJlZFwiOiBcIl42LjAuMlwiXG4gIH0sXG4gIGRldkRlcGVuZGVuY2llczoge1xuICAgIFwiQHR5cGVzL2V4cHJlc3NcIjogXCJeNC4xNy4xN1wiLFxuICAgIFwiQHR5cGVzL3JlYWN0XCI6IFwiMTguMi4zM1wiLFxuICAgIFwiQHVwbG9hZHRoaW5nL2VzbGludC1jb25maWdcIjogXCIwLjIuMFwiLFxuICAgIFwiQHVwbG9hZHRoaW5nL3RzY29uZmlnXCI6IFwiMC4xLjBcIixcbiAgICBcIkB1cGxvYWR0aGluZy90c3VwLWNvbmZpZ1wiOiBcIjAuMS4wXCIsXG4gICAgZXNsaW50OiBcIl44LjQ3LjBcIixcbiAgICBleHByZXNzOiBcIl40LjE4LjJcIixcbiAgICBmYXN0aWZ5OiBcIl40LjIzLjJcIixcbiAgICBoMzogXCJeMS44LjFcIixcbiAgICBuZXh0OiBcIjE0LjAuMVwiLFxuICAgIFwic29saWQtanNcIjogXCJeMS43LjExXCIsXG4gICAgdGFpbHdpbmRjc3M6IFwiXjMuMy4yXCIsXG4gICAgdHN1cDogXCI2LjcuMFwiLFxuICAgIFwidHlwZS1mZXN0XCI6IFwiXjMuMTEuMVwiLFxuICAgIHR5cGVzY3JpcHQ6IFwiXjUuMS42XCIsXG4gICAgdW5kaWNpOiBcIl41LjIwLjBcIixcbiAgICB2aXRlc3Q6IFwiXjAuMzAuMVwiLFxuICAgIHpvZDogXCJeMy4yMi4zXCJcbiAgfSxcbiAgZXNsaW50Q29uZmlnOiB7XG4gICAgcm9vdDogdHJ1ZSxcbiAgICBleHRlbmRzOiBbXG4gICAgICBcIkB1cGxvYWR0aGluZy9lc2xpbnQtY29uZmlnL2Jhc2VcIlxuICAgIF1cbiAgfVxufTtcblxuLy8gc3JjL2NvbnN0YW50cy50c1xuaWYgKCFwYWNrYWdlX2RlZmF1bHQudmVyc2lvbilcbiAgdGhyb3cgbmV3IEVycm9yKFwibm8gdmVyc2lvbiBmb3VuZCBpbiBwYWNrYWdlLmpzb25cIik7XG52YXIgVVBMT0FEVEhJTkdfVkVSU0lPTiA9IHBhY2thZ2VfZGVmYXVsdC52ZXJzaW9uO1xuXG4vLyBzcmMvaW50ZXJuYWwvZXJyb3ItZm9ybWF0dGVyLnRzXG5mdW5jdGlvbiBkZWZhdWx0RXJyb3JGb3JtYXR0ZXIoZXJyb3IpIHtcbiAgcmV0dXJuIHtcbiAgICBtZXNzYWdlOiBlcnJvci5tZXNzYWdlXG4gIH07XG59XG5mdW5jdGlvbiBmb3JtYXRFcnJvcihlcnJvciwgcm91dGVyKSB7XG4gIHZhciBfYTtcbiAgY29uc3QgZXJyb3JGb3JtYXR0ZXIgPSAoKF9hID0gcm91dGVyW09iamVjdC5rZXlzKHJvdXRlcilbMF1dKSA9PSBudWxsID8gdm9pZCAwIDogX2EuX2RlZi5lcnJvckZvcm1hdHRlcikgPz8gZGVmYXVsdEVycm9yRm9ybWF0dGVyO1xuICByZXR1cm4gZXJyb3JGb3JtYXR0ZXIoZXJyb3IpO1xufVxuXG4vLyBzcmMvaW50ZXJuYWwvdHlwZXMudHNcbnZhciB1bnNldE1hcmtlciA9IFwidW5zZXRNYXJrZXJcIjtcbnZhciBWQUxJRF9BQ1RJT05fVFlQRVMgPSBbXG4gIFwidXBsb2FkXCIsXG4gIFwiZmFpbHVyZVwiLFxuICBcIm11bHRpcGFydC1jb21wbGV0ZVwiXG5dO1xuXG4vLyBzcmMvaW50ZXJuYWwvaGFuZGxlci50c1xuaW1wb3J0IHtcbiAgZ2VuZXJhdGVVcGxvYWRUaGluZ1VSTCBhcyBnZW5lcmF0ZVVwbG9hZFRoaW5nVVJMMixcbiAgZ2V0VHlwZUZyb21GaWxlTmFtZSxcbiAgaXNPYmplY3QsXG4gIG9iamVjdEtleXMsXG4gIGZpbGxJbnB1dFJvdXRlQ29uZmlnIGFzIHBhcnNlQW5kRXhwYW5kSW5wdXRDb25maWcsXG4gIHNhZmVQYXJzZUpTT04sXG4gIFVwbG9hZFRoaW5nRXJyb3IgYXMgVXBsb2FkVGhpbmdFcnJvcjJcbn0gZnJvbSBcIkB1cGxvYWR0aGluZy9zaGFyZWRcIjtcblxuLy8gc3JjL2ludGVybmFsL2Rldi1ob29rLnRzXG5pbXBvcnQge1xuICBnZW5lcmF0ZVVwbG9hZFRoaW5nVVJMLFxuICBwb2xsRm9yRmlsZURhdGEsXG4gIFVwbG9hZFRoaW5nRXJyb3Jcbn0gZnJvbSBcIkB1cGxvYWR0aGluZy9zaGFyZWRcIjtcbnZhciBpc1ZhbGlkUmVzcG9uc2UgPSAocmVzcG9uc2UpID0+IHtcbiAgaWYgKCFyZXNwb25zZS5vaylcbiAgICByZXR1cm4gZmFsc2U7XG4gIGlmIChyZXNwb25zZS5zdGF0dXMgPj0gNDAwKVxuICAgIHJldHVybiBmYWxzZTtcbiAgaWYgKCFyZXNwb25zZS5oZWFkZXJzLmhhcyhcIngtdXBsb2FkdGhpbmctdmVyc2lvblwiKSlcbiAgICByZXR1cm4gZmFsc2U7XG4gIHJldHVybiB0cnVlO1xufTtcbnZhciBjb25kaXRpb25hbERldlNlcnZlciA9IGFzeW5jIChvcHRzKSA9PiB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJkZXZlbG9wbWVudFwiKVxuICAgIHJldHVybjtcbiAgY29uc3QgZmlsZURhdGEgPSBhd2FpdCBwb2xsRm9yRmlsZURhdGEoXG4gICAge1xuICAgICAgdXJsOiBnZW5lcmF0ZVVwbG9hZFRoaW5nVVJMKGAvYXBpL3BvbGxVcGxvYWQvJHtvcHRzLmZpbGVLZXl9YCksXG4gICAgICBhcGlLZXk6IG9wdHMuYXBpS2V5LFxuICAgICAgc2RrVmVyc2lvbjogVVBMT0FEVEhJTkdfVkVSU0lPTlxuICAgIH0sXG4gICAgYXN5bmMgKGpzb24pID0+IHtcbiAgICAgIGNvbnN0IGZpbGUgPSBqc29uLmZpbGVEYXRhO1xuICAgICAgbGV0IGNhbGxiYWNrVXJsID0gZmlsZS5jYWxsYmFja1VybCArIGA/c2x1Zz0ke2ZpbGUuY2FsbGJhY2tTbHVnfWA7XG4gICAgICBpZiAoIWNhbGxiYWNrVXJsLnN0YXJ0c1dpdGgoXCJodHRwXCIpKVxuICAgICAgICBjYWxsYmFja1VybCA9IFwiaHR0cDovL1wiICsgY2FsbGJhY2tVcmw7XG4gICAgICBjb25zb2xlLmxvZyhcIltVVF0gU0lNVUxBVElORyBGSUxFIFVQTE9BRCBXRUJIT09LIENBTExCQUNLXCIsIGNhbGxiYWNrVXJsKTtcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goY2FsbGJhY2tVcmwsIHtcbiAgICAgICAgbWV0aG9kOiBcIlBPU1RcIixcbiAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICAgIHN0YXR1czogXCJ1cGxvYWRlZFwiLFxuICAgICAgICAgIG1ldGFkYXRhOiBKU09OLnBhcnNlKGZpbGUubWV0YWRhdGEgPz8gXCJ7fVwiKSxcbiAgICAgICAgICBmaWxlOiB7XG4gICAgICAgICAgICB1cmw6IGBodHRwczovL3V0ZnMuaW8vZi8ke2VuY29kZVVSSUNvbXBvbmVudChvcHRzLmZpbGVLZXkpfWAsXG4gICAgICAgICAgICBrZXk6IG9wdHMuZmlsZUtleSxcbiAgICAgICAgICAgIG5hbWU6IGZpbGUuZmlsZU5hbWUsXG4gICAgICAgICAgICBzaXplOiBmaWxlLmZpbGVTaXplXG4gICAgICAgICAgfVxuICAgICAgICB9KSxcbiAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgIFwidXBsb2FkdGhpbmctaG9va1wiOiBcImNhbGxiYWNrXCJcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgICBpZiAoaXNWYWxpZFJlc3BvbnNlKHJlc3BvbnNlKSkge1xuICAgICAgICBjb25zb2xlLmxvZyhcbiAgICAgICAgICBcIltVVF0gU3VjY2Vzc2Z1bGx5IHNpbXVsYXRlZCBjYWxsYmFjayBmb3IgZmlsZVwiLFxuICAgICAgICAgIG9wdHMuZmlsZUtleVxuICAgICAgICApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihcbiAgICAgICAgICBcIltVVF0gRmFpbGVkIHRvIHNpbXVsYXRlIGNhbGxiYWNrIGZvciBmaWxlLiBJcyB5b3VyIHdlYmhvb2sgY29uZmlndXJlZCBjb3JyZWN0bHk/XCIsXG4gICAgICAgICAgb3B0cy5maWxlS2V5XG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICByZXR1cm4gZmlsZTtcbiAgICB9XG4gICk7XG4gIGlmIChmaWxlRGF0YSAhPT0gdm9pZCAwKVxuICAgIHJldHVybiBmaWxlRGF0YTtcbiAgY29uc29sZS5lcnJvcihgW1VUXSBGYWlsZWQgdG8gc2ltdWxhdGUgY2FsbGJhY2sgZm9yIGZpbGUgJHtvcHRzLmZpbGVLZXl9YCk7XG4gIHRocm93IG5ldyBVcGxvYWRUaGluZ0Vycm9yKHtcbiAgICBjb2RlOiBcIlVQTE9BRF9GQUlMRURcIixcbiAgICBtZXNzYWdlOiBcIkZpbGUgdG9vayB0b28gbG9uZyB0byB1cGxvYWRcIlxuICB9KTtcbn07XG5cbi8vIHNyYy9pbnRlcm5hbC9wYXJzZXIudHNcbmZ1bmN0aW9uIGdldFBhcnNlRm4ocGFyc2VyKSB7XG4gIGlmICh0eXBlb2YgcGFyc2VyLnBhcnNlID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICByZXR1cm4gcGFyc2VyLnBhcnNlO1xuICB9XG4gIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgcGFyc2VyXCIpO1xufVxuXG4vLyBzcmMvaW50ZXJuYWwvaGFuZGxlci50c1xudmFyIGNyZWF0ZVVURmV0Y2ggPSAoYXBpS2V5KSA9PiB7XG4gIHJldHVybiBhc3luYyAoZW5kcG9pbnQsIHBheWxvYWQpID0+IHtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKGdlbmVyYXRlVXBsb2FkVGhpbmdVUkwyKGVuZHBvaW50KSwge1xuICAgICAgbWV0aG9kOiBcIlBPU1RcIixcbiAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHBheWxvYWQpLFxuICAgICAgaGVhZGVyczoge1xuICAgICAgICBcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIixcbiAgICAgICAgXCJ4LXVwbG9hZHRoaW5nLWFwaS1rZXlcIjogYXBpS2V5LFxuICAgICAgICBcIngtdXBsb2FkdGhpbmctdmVyc2lvblwiOiBVUExPQURUSElOR19WRVJTSU9OXG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIHJlc3BvbnNlO1xuICB9O1xufTtcbnZhciBmaWxlQ291bnRMaW1pdEhpdCA9IChmaWxlcywgcm91dGVDb25maWcpID0+IHtcbiAgdmFyIF9hO1xuICBjb25zdCBjb3VudHMgPSB7fTtcbiAgZmlsZXMuZm9yRWFjaCgoZmlsZSkgPT4ge1xuICAgIGNvbnN0IHR5cGUgPSBnZXRUeXBlRnJvbUZpbGVOYW1lKGZpbGUubmFtZSwgb2JqZWN0S2V5cyhyb3V0ZUNvbmZpZykpO1xuICAgIGlmICghY291bnRzW3R5cGVdKSB7XG4gICAgICBjb3VudHNbdHlwZV0gPSAxO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb3VudHNbdHlwZV0gKz0gMTtcbiAgICB9XG4gIH0pO1xuICBmb3IgKGNvbnN0IF9rZXkgaW4gY291bnRzKSB7XG4gICAgY29uc3Qga2V5ID0gX2tleTtcbiAgICBjb25zdCBjb3VudCA9IGNvdW50c1trZXldO1xuICAgIGNvbnN0IGxpbWl0ID0gKF9hID0gcm91dGVDb25maWdba2V5XSkgPT0gbnVsbCA/IHZvaWQgMCA6IF9hLm1heEZpbGVDb3VudDtcbiAgICBpZiAoIWxpbWl0KSB7XG4gICAgICBjb25zb2xlLmVycm9yKHJvdXRlQ29uZmlnLCBrZXkpO1xuICAgICAgdGhyb3cgbmV3IFVwbG9hZFRoaW5nRXJyb3IyKHtcbiAgICAgICAgY29kZTogXCJCQURfUkVRVUVTVFwiLFxuICAgICAgICBtZXNzYWdlOiBcIkludmFsaWQgY29uZmlnIGR1cmluZyBmaWxlIGNvdW50XCIsXG4gICAgICAgIGNhdXNlOiBgRXhwZWN0ZWQgcm91dGUgY29uZmlnIHRvIGhhdmUgYSBtYXhGaWxlQ291bnQgZm9yIGtleSAke2tleX0gYnV0IG5vbmUgd2FzIGZvdW5kLmBcbiAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAoY291bnQgPiBsaW1pdCkge1xuICAgICAgcmV0dXJuIHsgbGltaXRIaXQ6IHRydWUsIHR5cGU6IGtleSwgbGltaXQsIGNvdW50IH07XG4gICAgfVxuICB9XG4gIHJldHVybiB7IGxpbWl0SGl0OiBmYWxzZSB9O1xufTtcbnZhciBnZXRIZWFkZXIgPSAocmVxLCBrZXkpID0+IHtcbiAgaWYgKHJlcS5oZWFkZXJzIGluc3RhbmNlb2YgSGVhZGVycykge1xuICAgIHJldHVybiByZXEuaGVhZGVycy5nZXQoa2V5KTtcbiAgfVxuICByZXR1cm4gcmVxLmhlYWRlcnNba2V5XTtcbn07XG52YXIgYnVpbGRSZXF1ZXN0SGFuZGxlciA9IChvcHRzKSA9PiB7XG4gIHJldHVybiBhc3luYyAoaW5wdXQpID0+IHtcbiAgICB2YXIgX2E7XG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcImRldmVsb3BtZW50XCIpIHtcbiAgICAgIGNvbnNvbGUubG9nKFwiW1VUXSBVcGxvYWRUaGluZyBkZXYgc2VydmVyIGlzIG5vdyBydW5uaW5nIVwiKTtcbiAgICB9XG4gICAgY29uc3QgeyByZXEsIHJlcywgZXZlbnQgfSA9IGlucHV0O1xuICAgIGNvbnN0IHsgcm91dGVyLCBjb25maWcgfSA9IG9wdHM7XG4gICAgY29uc3QgcHJlZmVycmVkT3JFbnZTZWNyZXQgPSAoY29uZmlnID09IG51bGwgPyB2b2lkIDAgOiBjb25maWcudXBsb2FkdGhpbmdTZWNyZXQpID8/IHByb2Nlc3MuZW52LlVQTE9BRFRISU5HX1NFQ1JFVDtcbiAgICBsZXQgdXJsO1xuICAgIHRyeSB7XG4gICAgICB1cmwgPSBuZXcgVVJMKGlucHV0LnVybCA/PyByZXEudXJsID8/IFwiXCIpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICByZXR1cm4gbmV3IFVwbG9hZFRoaW5nRXJyb3IyKHtcbiAgICAgICAgY29kZTogXCJCQURfUkVRVUVTVFwiLFxuICAgICAgICBtZXNzYWdlOiBgSW52YWxpZCB1cmwgJyR7KChfYSA9IGlucHV0LnVybCkgPT0gbnVsbCA/IHZvaWQgMCA6IF9hLmhyZWYpID8/IHJlcS51cmx9J2AsXG4gICAgICAgIGNhdXNlOiBlcnJvclxuICAgICAgfSk7XG4gICAgfVxuICAgIGNvbnN0IHBhcmFtcyA9IHVybC5zZWFyY2hQYXJhbXM7XG4gICAgY29uc3QgdXBsb2FkdGhpbmdIb29rID0gZ2V0SGVhZGVyKHJlcSwgXCJ1cGxvYWR0aGluZy1ob29rXCIpID8/IHZvaWQgMDtcbiAgICBjb25zdCBzbHVnID0gcGFyYW1zLmdldChcInNsdWdcIikgPz8gdm9pZCAwO1xuICAgIGNvbnN0IGFjdGlvblR5cGUgPSBwYXJhbXMuZ2V0KFwiYWN0aW9uVHlwZVwiKSA/PyB2b2lkIDA7XG4gICAgaWYgKCFzbHVnKVxuICAgICAgcmV0dXJuIG5ldyBVcGxvYWRUaGluZ0Vycm9yMih7XG4gICAgICAgIGNvZGU6IFwiQkFEX1JFUVVFU1RcIixcbiAgICAgICAgbWVzc2FnZTogXCJObyBzbHVnIHByb3ZpZGVkXCJcbiAgICAgIH0pO1xuICAgIGlmIChzbHVnICYmIHR5cGVvZiBzbHVnICE9PSBcInN0cmluZ1wiKSB7XG4gICAgICByZXR1cm4gbmV3IFVwbG9hZFRoaW5nRXJyb3IyKHtcbiAgICAgICAgY29kZTogXCJCQURfUkVRVUVTVFwiLFxuICAgICAgICBtZXNzYWdlOiBcImBzbHVnYCBtdXN0IGJlIGEgc3RyaW5nXCIsXG4gICAgICAgIGNhdXNlOiBgRXhwZWN0ZWQgc2x1ZyB0byBiZSBvZiB0eXBlICdzdHJpbmcnLCBnb3QgJyR7dHlwZW9mIHNsdWd9J2BcbiAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAoYWN0aW9uVHlwZSAmJiB0eXBlb2YgYWN0aW9uVHlwZSAhPT0gXCJzdHJpbmdcIikge1xuICAgICAgcmV0dXJuIG5ldyBVcGxvYWRUaGluZ0Vycm9yMih7XG4gICAgICAgIGNvZGU6IFwiQkFEX1JFUVVFU1RcIixcbiAgICAgICAgbWVzc2FnZTogXCJgYWN0aW9uVHlwZWAgbXVzdCBiZSBhIHN0cmluZ1wiLFxuICAgICAgICBjYXVzZTogYEV4cGVjdGVkIGFjdGlvblR5cGUgdG8gYmUgb2YgdHlwZSAnc3RyaW5nJywgZ290ICcke3R5cGVvZiBhY3Rpb25UeXBlfSdgXG4gICAgICB9KTtcbiAgICB9XG4gICAgaWYgKHVwbG9hZHRoaW5nSG9vayAmJiB0eXBlb2YgdXBsb2FkdGhpbmdIb29rICE9PSBcInN0cmluZ1wiKSB7XG4gICAgICByZXR1cm4gbmV3IFVwbG9hZFRoaW5nRXJyb3IyKHtcbiAgICAgICAgY29kZTogXCJCQURfUkVRVUVTVFwiLFxuICAgICAgICBtZXNzYWdlOiBcImB1cGxvYWR0aGluZ0hvb2tgIG11c3QgYmUgYSBzdHJpbmdcIixcbiAgICAgICAgY2F1c2U6IGBFeHBlY3RlZCB1cGxvYWR0aGluZ0hvb2sgdG8gYmUgb2YgdHlwZSAnc3RyaW5nJywgZ290ICcke3R5cGVvZiB1cGxvYWR0aGluZ0hvb2t9J2BcbiAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAoIXByZWZlcnJlZE9yRW52U2VjcmV0KSB7XG4gICAgICByZXR1cm4gbmV3IFVwbG9hZFRoaW5nRXJyb3IyKHtcbiAgICAgICAgY29kZTogXCJCQURfUkVRVUVTVFwiLFxuICAgICAgICBtZXNzYWdlOiBgUGxlYXNlIHNldCB5b3VyIHByZWZlcnJlZCBzZWNyZXQgaW4gJHtzbHVnfSByb3V0ZXIncyBjb25maWcgb3Igc2V0IFVQTE9BRFRISU5HX1NFQ1JFVCBpbiB5b3VyIGVudiBmaWxlYCxcbiAgICAgICAgY2F1c2U6IFwiTm8gc2VjcmV0IHByb3ZpZGVkXCJcbiAgICAgIH0pO1xuICAgIH1cbiAgICBjb25zdCB1cGxvYWRhYmxlID0gcm91dGVyW3NsdWddO1xuICAgIGlmICghdXBsb2FkYWJsZSkge1xuICAgICAgcmV0dXJuIG5ldyBVcGxvYWRUaGluZ0Vycm9yMih7XG4gICAgICAgIGNvZGU6IFwiTk9UX0ZPVU5EXCIsXG4gICAgICAgIG1lc3NhZ2U6IGBObyBmaWxlIHJvdXRlIGZvdW5kIGZvciBzbHVnICR7c2x1Z31gXG4gICAgICB9KTtcbiAgICB9XG4gICAgY29uc3QgdXRGZXRjaCA9IGNyZWF0ZVVURmV0Y2gocHJlZmVycmVkT3JFbnZTZWNyZXQpO1xuICAgIGlmICh1cGxvYWR0aGluZ0hvb2sgPT09IFwiY2FsbGJhY2tcIikge1xuICAgICAgY29uc3QgbWF5YmVSZXFCb2R5ID0gYXdhaXQgc2FmZVBhcnNlSlNPTihyZXEpO1xuICAgICAgaWYgKG1heWJlUmVxQm9keSBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICAgIHJldHVybiBuZXcgVXBsb2FkVGhpbmdFcnJvcjIoe1xuICAgICAgICAgIGNvZGU6IFwiQkFEX1JFUVVFU1RcIixcbiAgICAgICAgICBtZXNzYWdlOiBcIkludmFsaWQgcmVxdWVzdCBib2R5XCIsXG4gICAgICAgICAgY2F1c2U6IG1heWJlUmVxQm9keVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHJlczIgPSBhd2FpdCB1cGxvYWRhYmxlLnJlc29sdmVyKHtcbiAgICAgICAgZmlsZTogbWF5YmVSZXFCb2R5LmZpbGUsXG4gICAgICAgIG1ldGFkYXRhOiBtYXliZVJlcUJvZHkubWV0YWRhdGFcbiAgICAgIH0pO1xuICAgICAgYXdhaXQgdXRGZXRjaChcIi9hcGkvc2VydmVyQ2FsbGJhY2tcIiwge1xuICAgICAgICBmaWxlS2V5OiBtYXliZVJlcUJvZHkuZmlsZS5rZXksXG4gICAgICAgIGNhbGxiYWNrRGF0YTogcmVzMiA/PyBudWxsXG4gICAgICB9KTtcbiAgICAgIHJldHVybiB7IHN0YXR1czogMjAwIH07XG4gICAgfVxuICAgIGlmICghYWN0aW9uVHlwZSB8fCAhVkFMSURfQUNUSU9OX1RZUEVTLmluY2x1ZGVzKGFjdGlvblR5cGUpKSB7XG4gICAgICByZXR1cm4gbmV3IFVwbG9hZFRoaW5nRXJyb3IyKHtcbiAgICAgICAgY29kZTogXCJCQURfUkVRVUVTVFwiLFxuICAgICAgICBjYXVzZTogYEludmFsaWQgYWN0aW9uIHR5cGUgJHthY3Rpb25UeXBlfWAsXG4gICAgICAgIG1lc3NhZ2U6IGBFeHBlY3RlZCAke1ZBTElEX0FDVElPTl9UWVBFUy5tYXAoKHgpID0+IGBcIiR7eH1cImApLmpvaW4oXCIsIFwiKS5yZXBsYWNlKC8sKD8hLiosKS8sIFwiIG9yXCIpfSBidXQgZ290IFwiJHtcImFcIn1cImBcbiAgICAgIH0pO1xuICAgIH1cbiAgICBzd2l0Y2ggKGFjdGlvblR5cGUpIHtcbiAgICAgIGNhc2UgXCJ1cGxvYWRcIjoge1xuICAgICAgICBjb25zdCBtYXliZUlucHV0ID0gYXdhaXQgc2FmZVBhcnNlSlNPTihyZXEpO1xuICAgICAgICBpZiAobWF5YmVJbnB1dCBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICAgICAgcmV0dXJuIG5ldyBVcGxvYWRUaGluZ0Vycm9yMih7XG4gICAgICAgICAgICBjb2RlOiBcIkJBRF9SRVFVRVNUXCIsXG4gICAgICAgICAgICBtZXNzYWdlOiBcIkludmFsaWQgcmVxdWVzdCBib2R5XCIsXG4gICAgICAgICAgICBjYXVzZTogbWF5YmVJbnB1dFxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHsgZmlsZXMsIGlucHV0OiB1c2VySW5wdXQgfSA9IG1heWJlSW5wdXQ7XG4gICAgICAgIGxldCBwYXJzZWRJbnB1dCA9IHt9O1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGNvbnN0IGlucHV0UGFyc2VyID0gdXBsb2FkYWJsZS5fZGVmLmlucHV0UGFyc2VyO1xuICAgICAgICAgIHBhcnNlZElucHV0ID0gYXdhaXQgZ2V0UGFyc2VGbihpbnB1dFBhcnNlcikodXNlcklucHV0KTtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKGVycm9yKTtcbiAgICAgICAgICByZXR1cm4gbmV3IFVwbG9hZFRoaW5nRXJyb3IyKHtcbiAgICAgICAgICAgIGNvZGU6IFwiQkFEX1JFUVVFU1RcIixcbiAgICAgICAgICAgIG1lc3NhZ2U6IFwiSW52YWxpZCBpbnB1dC5cIixcbiAgICAgICAgICAgIGNhdXNlOiBlcnJvclxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGxldCBtZXRhZGF0YSA9IHt9O1xuICAgICAgICB0cnkge1xuICAgICAgICAgIG1ldGFkYXRhID0gYXdhaXQgdXBsb2FkYWJsZS5fZGVmLm1pZGRsZXdhcmUoe1xuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnNhZmUtYXNzaWdubWVudFxuICAgICAgICAgICAgcmVxLFxuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnNhZmUtYXNzaWdubWVudFxuICAgICAgICAgICAgcmVzLFxuICAgICAgICAgICAgZXZlbnQsXG4gICAgICAgICAgICBpbnB1dDogcGFyc2VkSW5wdXRcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKGVycm9yKTtcbiAgICAgICAgICByZXR1cm4gbmV3IFVwbG9hZFRoaW5nRXJyb3IyKHtcbiAgICAgICAgICAgIGNvZGU6IFwiSU5URVJOQUxfU0VSVkVSX0VSUk9SXCIsXG4gICAgICAgICAgICBtZXNzYWdlOiBcIkZhaWxlZCB0byBydW4gbWlkZGxld2FyZS5cIixcbiAgICAgICAgICAgIGNhdXNlOiBlcnJvclxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGlmICghQXJyYXkuaXNBcnJheShmaWxlcykgfHwgIWZpbGVzLmV2ZXJ5KFxuICAgICAgICAgIChmKSA9PiBpc09iamVjdChmKSAmJiB0eXBlb2YgZi5uYW1lID09PSBcInN0cmluZ1wiICYmIHR5cGVvZiBmLnNpemUgPT09IFwibnVtYmVyXCJcbiAgICAgICAgKSlcbiAgICAgICAgICByZXR1cm4gbmV3IFVwbG9hZFRoaW5nRXJyb3IyKHtcbiAgICAgICAgICAgIGNvZGU6IFwiQkFEX1JFUVVFU1RcIixcbiAgICAgICAgICAgIG1lc3NhZ2U6IFwiRmlsZXMgbXVzdCBiZSBhbiBhcnJheSBvZiBvYmplY3RzIHdpdGggbmFtZSBhbmQgc2l6ZVwiLFxuICAgICAgICAgICAgY2F1c2U6IGBFeHBlY3RlZCBmaWxlcyB0byBiZSBvZiB0eXBlICd7bmFtZTpzdHJpbmcsIHNpemU6bnVtYmVyfVtdJywgZ290ICcke0pTT04uc3RyaW5naWZ5KFxuICAgICAgICAgICAgICBmaWxlc1xuICAgICAgICAgICAgKX0nYFxuICAgICAgICAgIH0pO1xuICAgICAgICBsZXQgcGFyc2VkQ29uZmlnO1xuICAgICAgICB0cnkge1xuICAgICAgICAgIHBhcnNlZENvbmZpZyA9IHBhcnNlQW5kRXhwYW5kSW5wdXRDb25maWcoXG4gICAgICAgICAgICB1cGxvYWRhYmxlLl9kZWYucm91dGVyQ29uZmlnXG4gICAgICAgICAgKTtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKGVycm9yKTtcbiAgICAgICAgICByZXR1cm4gbmV3IFVwbG9hZFRoaW5nRXJyb3IyKHtcbiAgICAgICAgICAgIGNvZGU6IFwiQkFEX1JFUVVFU1RcIixcbiAgICAgICAgICAgIG1lc3NhZ2U6IFwiSW52YWxpZCBjb25maWcuXCIsXG4gICAgICAgICAgICBjYXVzZTogZXJyb3JcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICB0cnkge1xuICAgICAgICAgIGNvbnN0IHsgbGltaXRIaXQsIGNvdW50LCBsaW1pdCwgdHlwZSB9ID0gZmlsZUNvdW50TGltaXRIaXQoXG4gICAgICAgICAgICBmaWxlcyxcbiAgICAgICAgICAgIHBhcnNlZENvbmZpZ1xuICAgICAgICAgICk7XG4gICAgICAgICAgaWYgKGxpbWl0SGl0KSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IFVwbG9hZFRoaW5nRXJyb3IyKHtcbiAgICAgICAgICAgICAgY29kZTogXCJCQURfUkVRVUVTVFwiLFxuICAgICAgICAgICAgICBtZXNzYWdlOiBcIkZpbGUgbGltaXQgZXhjZWVkZWRcIixcbiAgICAgICAgICAgICAgY2F1c2U6IGBZb3UgdXBsb2FkZWQgJHtjb3VudH0gZmlsZXMgb2YgdHlwZSAnJHt0eXBlfScsIGJ1dCB0aGUgbGltaXQgZm9yIHRoYXQgdHlwZSBpcyAke2xpbWl0fWBcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKGVycm9yKTtcbiAgICAgICAgICByZXR1cm4gbmV3IFVwbG9hZFRoaW5nRXJyb3IyKHtcbiAgICAgICAgICAgIGNvZGU6IFwiQkFEX1JFUVVFU1RcIixcbiAgICAgICAgICAgIG1lc3NhZ2U6IFwiSW52YWxpZCBjb25maWcuXCIsXG4gICAgICAgICAgICBjYXVzZTogZXJyb3JcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBjYWxsYmFja1VybCA9IHVybC5vcmlnaW4gKyB1cmwucGF0aG5hbWU7XG4gICAgICAgIGNvbnN0IHVwbG9hZHRoaW5nQXBpUmVzcG9uc2UgPSBhd2FpdCB1dEZldGNoKFwiL2FwaS9wcmVwYXJlVXBsb2FkXCIsIHtcbiAgICAgICAgICBmaWxlcyxcbiAgICAgICAgICByb3V0ZUNvbmZpZzogcGFyc2VkQ29uZmlnLFxuICAgICAgICAgIG1ldGFkYXRhLFxuICAgICAgICAgIGNhbGxiYWNrVXJsOiAoY29uZmlnID09IG51bGwgPyB2b2lkIDAgOiBjb25maWcuY2FsbGJhY2tVcmwpID8/IGNhbGxiYWNrVXJsLFxuICAgICAgICAgIGNhbGxiYWNrU2x1Zzogc2x1Z1xuICAgICAgICB9KTtcbiAgICAgICAgY29uc3QgcGFyc2VkUmVzcG9uc2UgPSBhd2FpdCBzYWZlUGFyc2VKU09OKFxuICAgICAgICAgIHVwbG9hZHRoaW5nQXBpUmVzcG9uc2VcbiAgICAgICAgKTtcbiAgICAgICAgaWYgKCF1cGxvYWR0aGluZ0FwaVJlc3BvbnNlLm9rIHx8IHBhcnNlZFJlc3BvbnNlIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKFwiW1VUXSB1bmFibGUgdG8gZ2V0IHByZXNpZ25lZCB1cmxzXCIpO1xuICAgICAgICAgIHJldHVybiBuZXcgVXBsb2FkVGhpbmdFcnJvcjIoe1xuICAgICAgICAgICAgY29kZTogXCJVUkxfR0VORVJBVElPTl9GQUlMRURcIixcbiAgICAgICAgICAgIG1lc3NhZ2U6IFwiVW5hYmxlIHRvIGdldCBwcmVzaWduZWQgdXJsc1wiLFxuICAgICAgICAgICAgY2F1c2U6IHBhcnNlZFJlc3BvbnNlXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSBcImRldmVsb3BtZW50XCIpIHtcbiAgICAgICAgICBmb3IgKGNvbnN0IGZpbGUgb2YgcGFyc2VkUmVzcG9uc2UpIHtcbiAgICAgICAgICAgIHZvaWQgY29uZGl0aW9uYWxEZXZTZXJ2ZXIoe1xuICAgICAgICAgICAgICBmaWxlS2V5OiBmaWxlLmtleSxcbiAgICAgICAgICAgICAgYXBpS2V5OiBwcmVmZXJyZWRPckVudlNlY3JldFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgYm9keTogcGFyc2VkUmVzcG9uc2UubWFwKCh4KSA9PiAoe1xuICAgICAgICAgICAgLi4ueCxcbiAgICAgICAgICAgIHBvbGxpbmdVcmw6IGdlbmVyYXRlVXBsb2FkVGhpbmdVUkwyKGAvYXBpL3NlcnZlckNhbGxiYWNrYClcbiAgICAgICAgICB9KSksXG4gICAgICAgICAgc3RhdHVzOiAyMDBcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgIGNhc2UgXCJtdWx0aXBhcnQtY29tcGxldGVcIjoge1xuICAgICAgICBjb25zdCBtYXliZVJlcUJvZHkgPSBhd2FpdCBzYWZlUGFyc2VKU09OKHJlcSk7XG4gICAgICAgIGlmIChtYXliZVJlcUJvZHkgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgICAgIHJldHVybiBuZXcgVXBsb2FkVGhpbmdFcnJvcjIoe1xuICAgICAgICAgICAgY29kZTogXCJCQURfUkVRVUVTVFwiLFxuICAgICAgICAgICAgbWVzc2FnZTogXCJJbnZhbGlkIHJlcXVlc3QgYm9keVwiLFxuICAgICAgICAgICAgY2F1c2U6IG1heWJlUmVxQm9keVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGNvbXBsZXRlUmVzID0gYXdhaXQgdXRGZXRjaChcIi9hcGkvY29tcGxldGVNdWx0aXBhcnRcIiwge1xuICAgICAgICAgIGZpbGVLZXk6IG1heWJlUmVxQm9keS5maWxlS2V5LFxuICAgICAgICAgIHVwbG9hZElkOiBtYXliZVJlcUJvZHkudXBsb2FkSWQsXG4gICAgICAgICAgZXRhZ3M6IG1heWJlUmVxQm9keS5ldGFnc1xuICAgICAgICB9KTtcbiAgICAgICAgaWYgKCFjb21wbGV0ZVJlcy5vaykge1xuICAgICAgICAgIHJldHVybiBuZXcgVXBsb2FkVGhpbmdFcnJvcjIoe1xuICAgICAgICAgICAgY29kZTogXCJVUExPQURfRkFJTEVEXCIsXG4gICAgICAgICAgICBtZXNzYWdlOiBcIkZhaWxlZCB0byBjb21wbGV0ZSBtdWx0aXBhcnQgdXBsb2FkXCJcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geyBzdGF0dXM6IDIwMCB9O1xuICAgICAgfVxuICAgICAgY2FzZSBcImZhaWx1cmVcIjoge1xuICAgICAgICBjb25zdCBtYXliZVJlcUJvZHkgPSBhd2FpdCBzYWZlUGFyc2VKU09OKHJlcSk7XG4gICAgICAgIGlmIChtYXliZVJlcUJvZHkgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgICAgIHJldHVybiBuZXcgVXBsb2FkVGhpbmdFcnJvcjIoe1xuICAgICAgICAgICAgY29kZTogXCJCQURfUkVRVUVTVFwiLFxuICAgICAgICAgICAgbWVzc2FnZTogXCJJbnZhbGlkIHJlcXVlc3QgYm9keVwiLFxuICAgICAgICAgICAgY2F1c2U6IG1heWJlUmVxQm9keVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHsgZmlsZUtleSwgdXBsb2FkSWQgfSA9IG1heWJlUmVxQm9keTtcbiAgICAgICAgY29uc3QgdXBsb2FkdGhpbmdBcGlSZXNwb25zZSA9IGF3YWl0IHV0RmV0Y2goXCIvYXBpL2ZhaWx1cmVDYWxsYmFja1wiLCB7XG4gICAgICAgICAgZmlsZUtleSxcbiAgICAgICAgICB1cGxvYWRJZFxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKCF1cGxvYWR0aGluZ0FwaVJlc3BvbnNlLm9rKSB7XG4gICAgICAgICAgY29uc29sZS5lcnJvcihcIltVVF0gZmFpbGVkIHRvIG1hcmsgdXBsb2FkIGFzIGZhaWxlZFwiKTtcbiAgICAgICAgICBjb25zdCBwYXJzZWRSZXNwb25zZSA9IGF3YWl0IHNhZmVQYXJzZUpTT04oXG4gICAgICAgICAgICB1cGxvYWR0aGluZ0FwaVJlc3BvbnNlXG4gICAgICAgICAgKTtcbiAgICAgICAgICByZXR1cm4gbmV3IFVwbG9hZFRoaW5nRXJyb3IyKHtcbiAgICAgICAgICAgIGNvZGU6IFwiVVJMX0dFTkVSQVRJT05fRkFJTEVEXCIsXG4gICAgICAgICAgICBtZXNzYWdlOiBcIlVuYWJsZSB0byBnZXQgcHJlc2lnbmVkIHVybHNcIixcbiAgICAgICAgICAgIGNhdXNlOiBwYXJzZWRSZXNwb25zZVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgdXBsb2FkYWJsZS5fZGVmLm9uVXBsb2FkRXJyb3Ioe1xuICAgICAgICAgICAgZXJyb3I6IG5ldyBVcGxvYWRUaGluZ0Vycm9yMih7XG4gICAgICAgICAgICAgIGNvZGU6IFwiVVBMT0FEX0ZBSUxFRFwiLFxuICAgICAgICAgICAgICBtZXNzYWdlOiBgVXBsb2FkIGZhaWxlZCBmb3IgJHtmaWxlS2V5fWBcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgZmlsZUtleVxuICAgICAgICAgIH0pO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXG4gICAgICAgICAgICBcIltVVF0gRmFpbGVkIHRvIHJ1biBvblVwbG9hZEVycm9yIGNhbGxiYWNrLiBZb3UgcHJvYmFibHkgc2hvdWxkbid0IGJlIHRocm93aW5nIGVycm9ycyBpbiB5b3VyIGNhbGxiYWNrLlwiXG4gICAgICAgICAgKTtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKGVycm9yKTtcbiAgICAgICAgICByZXR1cm4gbmV3IFVwbG9hZFRoaW5nRXJyb3IyKHtcbiAgICAgICAgICAgIGNvZGU6IFwiSU5URVJOQUxfU0VSVkVSX0VSUk9SXCIsXG4gICAgICAgICAgICBtZXNzYWdlOiBcIkZhaWxlZCB0byBydW4gb25VcGxvYWRFcnJvciBjYWxsYmFja1wiLFxuICAgICAgICAgICAgY2F1c2U6IGVycm9yXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHsgc3RhdHVzOiAyMDAgfTtcbiAgICAgIH1cbiAgICAgIGRlZmF1bHQ6IHtcbiAgICAgICAgcmV0dXJuIG5ldyBVcGxvYWRUaGluZ0Vycm9yMih7XG4gICAgICAgICAgY29kZTogXCJCQURfUkVRVUVTVFwiLFxuICAgICAgICAgIG1lc3NhZ2U6IGBJbnZhbGlkIGFjdGlvbiB0eXBlYFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG59O1xudmFyIGJ1aWxkUGVybWlzc2lvbnNJbmZvSGFuZGxlciA9IChvcHRzKSA9PiB7XG4gIHJldHVybiAoKSA9PiB7XG4gICAgY29uc3QgciA9IG9wdHMucm91dGVyO1xuICAgIGNvbnN0IHBlcm1pc3Npb25zID0gT2JqZWN0LmtleXMocikubWFwKChrKSA9PiB7XG4gICAgICBjb25zdCByb3V0ZSA9IHJba107XG4gICAgICBjb25zdCBjb25maWcgPSBwYXJzZUFuZEV4cGFuZElucHV0Q29uZmlnKHJvdXRlLl9kZWYucm91dGVyQ29uZmlnKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHNsdWc6IGssXG4gICAgICAgIGNvbmZpZ1xuICAgICAgfTtcbiAgICB9KTtcbiAgICByZXR1cm4gcGVybWlzc2lvbnM7XG4gIH07XG59O1xuXG4vLyBzcmMvaW50ZXJuYWwvdXBsb2FkLWJ1aWxkZXIudHNcbmZ1bmN0aW9uIGludGVybmFsQ3JlYXRlQnVpbGRlcihpbml0RGVmID0ge30pIHtcbiAgY29uc3QgX2RlZiA9IHtcbiAgICAvLyBEZWZhdWx0IHJvdXRlciBjb25maWdcbiAgICByb3V0ZXJDb25maWc6IHtcbiAgICAgIGltYWdlOiB7XG4gICAgICAgIG1heEZpbGVTaXplOiBcIjRNQlwiXG4gICAgICB9XG4gICAgfSxcbiAgICBpbnB1dFBhcnNlcjogeyBwYXJzZTogKCkgPT4gKHt9KSwgX2lucHV0OiB7fSwgX291dHB1dDoge30gfSxcbiAgICBtaWRkbGV3YXJlOiAoKSA9PiAoe30pLFxuICAgIG9uVXBsb2FkRXJyb3I6ICgpID0+ICh7fSksXG4gICAgZXJyb3JGb3JtYXR0ZXI6IGluaXREZWYuZXJyb3JGb3JtYXR0ZXIgPz8gZGVmYXVsdEVycm9yRm9ybWF0dGVyLFxuICAgIC8vIE92ZXJsb2FkIHdpdGggcHJvcGVydGllcyBwYXNzZWQgaW5cbiAgICAuLi5pbml0RGVmXG4gIH07XG4gIHJldHVybiB7XG4gICAgaW5wdXQodXNlclBhcnNlcikge1xuICAgICAgcmV0dXJuIGludGVybmFsQ3JlYXRlQnVpbGRlcih7XG4gICAgICAgIC4uLl9kZWYsXG4gICAgICAgIGlucHV0UGFyc2VyOiB1c2VyUGFyc2VyXG4gICAgICB9KTtcbiAgICB9LFxuICAgIG1pZGRsZXdhcmUodXNlck1pZGRsZXdhcmUpIHtcbiAgICAgIHJldHVybiBpbnRlcm5hbENyZWF0ZUJ1aWxkZXIoe1xuICAgICAgICAuLi5fZGVmLFxuICAgICAgICBtaWRkbGV3YXJlOiB1c2VyTWlkZGxld2FyZVxuICAgICAgfSk7XG4gICAgfSxcbiAgICBvblVwbG9hZENvbXBsZXRlKHVzZXJVcGxvYWRDb21wbGV0ZSkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgX2RlZixcbiAgICAgICAgcmVzb2x2ZXI6IHVzZXJVcGxvYWRDb21wbGV0ZVxuICAgICAgfTtcbiAgICB9LFxuICAgIG9uVXBsb2FkRXJyb3IodXNlck9uVXBsb2FkRXJyb3IpIHtcbiAgICAgIHJldHVybiBpbnRlcm5hbENyZWF0ZUJ1aWxkZXIoe1xuICAgICAgICAuLi5fZGVmLFxuICAgICAgICBvblVwbG9hZEVycm9yOiB1c2VyT25VcGxvYWRFcnJvclxuICAgICAgfSk7XG4gICAgfVxuICB9O1xufVxuZnVuY3Rpb24gY3JlYXRlQnVpbGRlcihvcHRzKSB7XG4gIHJldHVybiAoaW5wdXQpID0+IHtcbiAgICByZXR1cm4gaW50ZXJuYWxDcmVhdGVCdWlsZGVyKHtcbiAgICAgIHJvdXRlckNvbmZpZzogaW5wdXQsXG4gICAgICAuLi5vcHRzXG4gICAgfSk7XG4gIH07XG59XG5cbmV4cG9ydCB7XG4gIFVQTE9BRFRISU5HX1ZFUlNJT04sXG4gIGRlZmF1bHRFcnJvckZvcm1hdHRlcixcbiAgZm9ybWF0RXJyb3IsXG4gIHVuc2V0TWFya2VyLFxuICBWQUxJRF9BQ1RJT05fVFlQRVMsXG4gIGJ1aWxkUmVxdWVzdEhhbmRsZXIsXG4gIGJ1aWxkUGVybWlzc2lvbnNJbmZvSGFuZGxlcixcbiAgY3JlYXRlQnVpbGRlclxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNodW5rLUVDS0VCNEU3Lm1qcy5tYXAiXSwibmFtZXMiOlsicGFja2FnZV9kZWZhdWx0IiwibmFtZSIsInZlcnNpb24iLCJlbmdpbmVzIiwibm9kZSIsImxpY2Vuc2UiLCJleHBvcnRzIiwidHlwZXMiLCJpbXBvcnQiLCJyZXF1aXJlIiwiZmlsZXMiLCJwdWJsaXNoQ29uZmlnIiwiYWNjZXNzIiwidHlwZXNWZXJzaW9ucyIsImNsaWVudCIsInNlcnZlciIsIm5leHQiLCJ0dyIsImV4cHJlc3MiLCJmYXN0aWZ5IiwiaDMiLCJzY3JpcHRzIiwibGludCIsImJ1aWxkIiwiY2xlYW4iLCJkZXYiLCJ0ZXN0IiwidHlwZWNoZWNrIiwiZGVwZW5kZW5jaWVzIiwiZGV2RGVwZW5kZW5jaWVzIiwiZXNsaW50IiwidGFpbHdpbmRjc3MiLCJ0c3VwIiwidHlwZXNjcmlwdCIsInVuZGljaSIsInZpdGVzdCIsInpvZCIsImVzbGludENvbmZpZyIsInJvb3QiLCJleHRlbmRzIiwiRXJyb3IiLCJVUExPQURUSElOR19WRVJTSU9OIiwiZGVmYXVsdEVycm9yRm9ybWF0dGVyIiwiZXJyb3IiLCJtZXNzYWdlIiwiZm9ybWF0RXJyb3IiLCJyb3V0ZXIiLCJfYSIsImVycm9yRm9ybWF0dGVyIiwiT2JqZWN0Iiwia2V5cyIsIl9kZWYiLCJ1bnNldE1hcmtlciIsIlZBTElEX0FDVElPTl9UWVBFUyIsImdlbmVyYXRlVXBsb2FkVGhpbmdVUkwiLCJnZW5lcmF0ZVVwbG9hZFRoaW5nVVJMMiIsImdldFR5cGVGcm9tRmlsZU5hbWUiLCJpc09iamVjdCIsIm9iamVjdEtleXMiLCJmaWxsSW5wdXRSb3V0ZUNvbmZpZyIsInBhcnNlQW5kRXhwYW5kSW5wdXRDb25maWciLCJzYWZlUGFyc2VKU09OIiwiVXBsb2FkVGhpbmdFcnJvciIsIlVwbG9hZFRoaW5nRXJyb3IyIiwicG9sbEZvckZpbGVEYXRhIiwiaXNWYWxpZFJlc3BvbnNlIiwicmVzcG9uc2UiLCJvayIsInN0YXR1cyIsImhlYWRlcnMiLCJoYXMiLCJjb25kaXRpb25hbERldlNlcnZlciIsIm9wdHMiLCJwcm9jZXNzIiwiZmlsZURhdGEiLCJ1cmwiLCJmaWxlS2V5IiwiYXBpS2V5Iiwic2RrVmVyc2lvbiIsImpzb24iLCJmaWxlIiwiY2FsbGJhY2tVcmwiLCJjYWxsYmFja1NsdWciLCJzdGFydHNXaXRoIiwiY29uc29sZSIsImxvZyIsImZldGNoIiwibWV0aG9kIiwiYm9keSIsIkpTT04iLCJzdHJpbmdpZnkiLCJtZXRhZGF0YSIsInBhcnNlIiwiZW5jb2RlVVJJQ29tcG9uZW50Iiwia2V5IiwiZmlsZU5hbWUiLCJzaXplIiwiZmlsZVNpemUiLCJjb2RlIiwiZ2V0UGFyc2VGbiIsInBhcnNlciIsImNyZWF0ZVVURmV0Y2giLCJlbmRwb2ludCIsInBheWxvYWQiLCJmaWxlQ291bnRMaW1pdEhpdCIsInJvdXRlQ29uZmlnIiwiY291bnRzIiwiZm9yRWFjaCIsInR5cGUiLCJfa2V5IiwiY291bnQiLCJsaW1pdCIsIm1heEZpbGVDb3VudCIsImNhdXNlIiwibGltaXRIaXQiLCJnZXRIZWFkZXIiLCJyZXEiLCJIZWFkZXJzIiwiZ2V0IiwiYnVpbGRSZXF1ZXN0SGFuZGxlciIsImlucHV0IiwicmVzIiwiZXZlbnQiLCJjb25maWciLCJwcmVmZXJyZWRPckVudlNlY3JldCIsInVwbG9hZHRoaW5nU2VjcmV0IiwiZW52IiwiVVBMT0FEVEhJTkdfU0VDUkVUIiwiVVJMIiwiaHJlZiIsInBhcmFtcyIsInNlYXJjaFBhcmFtcyIsInVwbG9hZHRoaW5nSG9vayIsInNsdWciLCJhY3Rpb25UeXBlIiwidXBsb2FkYWJsZSIsInV0RmV0Y2giLCJtYXliZVJlcUJvZHkiLCJyZXMyIiwicmVzb2x2ZXIiLCJjYWxsYmFja0RhdGEiLCJpbmNsdWRlcyIsIm1hcCIsIngiLCJqb2luIiwicmVwbGFjZSIsIm1heWJlSW5wdXQiLCJ1c2VySW5wdXQiLCJwYXJzZWRJbnB1dCIsImlucHV0UGFyc2VyIiwibWlkZGxld2FyZSIsIkFycmF5IiwiaXNBcnJheSIsImV2ZXJ5IiwiZiIsInBhcnNlZENvbmZpZyIsInJvdXRlckNvbmZpZyIsIm9yaWdpbiIsInBhdGhuYW1lIiwidXBsb2FkdGhpbmdBcGlSZXNwb25zZSIsInBhcnNlZFJlc3BvbnNlIiwicG9sbGluZ1VybCIsImNvbXBsZXRlUmVzIiwidXBsb2FkSWQiLCJldGFncyIsIm9uVXBsb2FkRXJyb3IiLCJidWlsZFBlcm1pc3Npb25zSW5mb0hhbmRsZXIiLCJyIiwicGVybWlzc2lvbnMiLCJrIiwicm91dGUiLCJpbnRlcm5hbENyZWF0ZUJ1aWxkZXIiLCJpbml0RGVmIiwiaW1hZ2UiLCJtYXhGaWxlU2l6ZSIsIl9pbnB1dCIsIl9vdXRwdXQiLCJ1c2VyUGFyc2VyIiwidXNlck1pZGRsZXdhcmUiLCJvblVwbG9hZENvbXBsZXRlIiwidXNlclVwbG9hZENvbXBsZXRlIiwidXNlck9uVXBsb2FkRXJyb3IiLCJjcmVhdGVCdWlsZGVyIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/uploadthing/dist/chunk-ECKEB4E7.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/uploadthing/dist/chunk-J63ZFLAK.mjs":
/*!**********************************************************!*\
  !*** ./node_modules/uploadthing/dist/chunk-J63ZFLAK.mjs ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   maybeParseResponseXML: () => (/* binding */ maybeParseResponseXML),\n/* harmony export */   uploadPart: () => (/* binding */ uploadPart),\n/* harmony export */   uploadPartWithProgress: () => (/* binding */ uploadPartWithProgress)\n/* harmony export */ });\n/* harmony import */ var _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @uploadthing/shared */ \"(rsc)/./node_modules/@uploadthing/shared/dist/index.mjs\");\n// src/internal/multi-part.ts\n\n// src/internal/s3-error-parser.ts\nvar maybeParseResponseXML = (maybeXml)=>{\n    const codeMatch = maybeXml.match(/<Code>(.*?)<\\/Code>/s);\n    const messageMatch = maybeXml.match(/<Message>(.*?)<\\/Message>/s);\n    const code = codeMatch == null ? void 0 : codeMatch[1];\n    const message = messageMatch == null ? void 0 : messageMatch[1];\n    if (!code || !message) return null;\n    return {\n        code: s3CodeToUploadThingCode[code] ?? DEFAULT_ERROR_CODE,\n        message\n    };\n};\nvar DEFAULT_ERROR_CODE = \"UPLOAD_FAILED\";\nvar s3CodeToUploadThingCode = {\n    AccessDenied: \"FORBIDDEN\",\n    // 403 Forbidden\n    EntityTooSmall: \"TOO_SMALL\",\n    // 400 Bad Request\n    EntityTooLarge: \"TOO_LARGE\",\n    // 400 Bad Request\n    ExpiredToken: \"FORBIDDEN\",\n    // 400 Bad Request\n    IncorrectNumberOfFilesInPostRequest: \"TOO_MANY_FILES\",\n    // 400 Bad Request\n    InternalError: \"INTERNAL_SERVER_ERROR\",\n    // 500 Internal Server Error\n    KeyTooLongError: \"KEY_TOO_LONG\",\n    // 400 Bad Request\n    MaxMessageLengthExceeded: \"TOO_LARGE\"\n};\n// src/internal/multi-part.ts\nasync function uploadPart(opts, retryCount = 0) {\n    const s3Res = await opts.fetch(opts.url, {\n        method: \"PUT\",\n        body: opts.chunk,\n        headers: {\n            \"Content-Type\": opts.contentType,\n            \"Content-Disposition\": [\n                opts.contentDisposition,\n                `filename=\"${opts.fileName}\"`,\n                `filename*=UTF-8''${opts.fileName}`\n            ].join(\"; \")\n        }\n    });\n    if (s3Res.ok) {\n        const etag = s3Res.headers.get(\"Etag\");\n        if (!etag) {\n            throw new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError({\n                code: \"UPLOAD_FAILED\",\n                message: \"Missing Etag header from uploaded part\"\n            });\n        }\n        return etag.replace(/\"/g, \"\");\n    }\n    if (retryCount < opts.maxRetries) {\n        const delay = 2 ** retryCount * 1e3;\n        await new Promise((r)=>setTimeout(r, delay));\n        return uploadPart(opts, retryCount++);\n    }\n    await opts.fetch((0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.generateUploadThingURL)(\"/api/failureCallback\"), {\n        method: \"POST\",\n        body: JSON.stringify({\n            fileKey: opts.key\n        }),\n        headers: opts.utRequestHeaders\n    });\n    const text = await s3Res.text();\n    const parsed = maybeParseResponseXML(text);\n    if (parsed == null ? void 0 : parsed.message) {\n        throw new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError({\n            code: \"UPLOAD_FAILED\",\n            message: parsed.message\n        });\n    }\n    throw new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.UploadThingError({\n        code: \"UPLOAD_FAILED\",\n        message: \"Failed to upload file to storage provider\",\n        cause: s3Res\n    });\n}\nasync function uploadPartWithProgress(opts, retryCount = 0) {\n    return new Promise((resolve, reject)=>{\n        const xhr = new XMLHttpRequest();\n        xhr.open(\"PUT\", opts.url, true);\n        xhr.setRequestHeader(\"Content-Type\", opts.fileType);\n        xhr.setRequestHeader(\"Content-Disposition\", [\n            opts.contentDisposition,\n            `filename=\"${opts.fileName}\"`,\n            `filename*=UTF-8''${opts.fileName}`\n        ].join(\"; \"));\n        xhr.onload = async ()=>{\n            if (xhr.status >= 200 && xhr.status < 300) {\n                const etag = xhr.getResponseHeader(\"Etag\");\n                etag ? resolve(etag) : reject(\"NO ETAG\");\n            } else if (retryCount < opts.maxRetries) {\n                const delay = Math.pow(2, retryCount) * 1e3;\n                await new Promise((res)=>setTimeout(res, delay));\n                await uploadPartWithProgress(opts, retryCount + 1);\n            } else {\n                reject(\"Max retries exceeded\");\n            }\n        };\n        let lastProgress = 0;\n        xhr.onerror = async ()=>{\n            lastProgress = 0;\n            if (retryCount < opts.maxRetries) {\n                const delay = Math.pow(2, retryCount) * 100;\n                await new Promise((res)=>setTimeout(res, delay));\n                await uploadPartWithProgress(opts, retryCount + 1);\n            } else {\n                reject(\"Max retries exceeded\");\n            }\n        };\n        xhr.upload.onprogress = (e)=>{\n            const delta = e.loaded - lastProgress;\n            lastProgress += delta;\n            opts.onProgress(delta);\n        };\n        xhr.send(opts.chunk);\n    });\n}\n //# sourceMappingURL=chunk-J63ZFLAK.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/uploadthing/dist/chunk-J63ZFLAK.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/uploadthing/dist/chunk-SYW7QG4P.mjs":
/*!**********************************************************!*\
  !*** ./node_modules/uploadthing/dist/chunk-SYW7QG4P.mjs ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   UTApi: () => (/* binding */ UTApi),\n/* harmony export */   createServerHandler: () => (/* binding */ createServerHandler),\n/* harmony export */   createUploadthing: () => (/* binding */ createUploadthing),\n/* harmony export */   extractRouterConfig: () => (/* binding */ extractRouterConfig)\n/* harmony export */ });\n/* harmony import */ var _chunk_J63ZFLAK_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chunk-J63ZFLAK.mjs */ \"(rsc)/./node_modules/uploadthing/dist/chunk-J63ZFLAK.mjs\");\n/* harmony import */ var _chunk_WPSY3MFJ_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./chunk-WPSY3MFJ.mjs */ \"(rsc)/./node_modules/uploadthing/dist/chunk-WPSY3MFJ.mjs\");\n/* harmony import */ var _chunk_ECKEB4E7_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./chunk-ECKEB4E7.mjs */ \"(rsc)/./node_modules/uploadthing/dist/chunk-ECKEB4E7.mjs\");\n/* harmony import */ var _uploadthing_shared__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @uploadthing/shared */ \"(rsc)/./node_modules/@uploadthing/shared/dist/index.mjs\");\n\n\n\n// src/server.ts\n\n// src/sdk/index.ts\n\n// src/sdk/utils.ts\n\nfunction guardServerOnly() {\n    if (false) {}\n}\nfunction getApiKeyOrThrow(apiKey) {\n    if (apiKey) return apiKey;\n    if (process.env.UPLOADTHING_SECRET) return process.env.UPLOADTHING_SECRET;\n    throw new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_3__.UploadThingError({\n        code: \"MISSING_ENV\",\n        message: \"Missing `UPLOADTHING_SECRET` env variable.\"\n    });\n}\nvar uploadFilesInternal = async (data, opts)=>{\n    const fileData = data.files.map((file)=>({\n            name: file.name ?? \"unnamed-blob\",\n            type: file.type,\n            size: file.size\n        }));\n    const res = await opts.fetch((0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_3__.generateUploadThingURL)(\"/api/uploadFiles\"), {\n        method: \"POST\",\n        headers: opts.utRequestHeaders,\n        cache: \"no-store\",\n        body: JSON.stringify({\n            files: fileData,\n            metadata: data.metadata,\n            contentDisposition: data.contentDisposition\n        })\n    });\n    if (!res.ok) {\n        const error = await _uploadthing_shared__WEBPACK_IMPORTED_MODULE_3__.UploadThingError.fromResponse(res);\n        throw error;\n    }\n    const clonedRes = res.clone();\n    const json = await res.json();\n    if (\"error\" in json) {\n        const error = await _uploadthing_shared__WEBPACK_IMPORTED_MODULE_3__.UploadThingError.fromResponse(clonedRes);\n        throw error;\n    }\n    const uploads = await Promise.allSettled(data.files.map(async (file, i)=>{\n        const { presignedUrls, key, fileUrl, uploadId, chunkSize } = json.data[i];\n        if (!presignedUrls || !Array.isArray(presignedUrls)) {\n            throw new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_3__.UploadThingError({\n                code: \"URL_GENERATION_FAILED\",\n                message: \"Failed to generate presigned URL\",\n                cause: JSON.stringify(json.data[i])\n            });\n        }\n        const etags = await Promise.all(presignedUrls.map(async (url, index)=>{\n            const offset = chunkSize * index;\n            const end = Math.min(offset + chunkSize, file.size);\n            const chunk = file.slice(offset, end);\n            const etag = await (0,_chunk_J63ZFLAK_mjs__WEBPACK_IMPORTED_MODULE_0__.uploadPart)({\n                fetch: opts.fetch,\n                url,\n                chunk,\n                contentDisposition: data.contentDisposition,\n                contentType: file.type,\n                fileName: file.name,\n                maxRetries: 10,\n                key,\n                utRequestHeaders: opts.utRequestHeaders\n            });\n            return {\n                tag: etag,\n                partNumber: index + 1\n            };\n        }));\n        await opts.fetch((0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_3__.generateUploadThingURL)(\"/api/completeMultipart\"), {\n            method: \"POST\",\n            body: JSON.stringify({\n                fileKey: key,\n                uploadId,\n                etags\n            }),\n            headers: opts.utRequestHeaders\n        });\n        await (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_3__.pollForFileData)({\n            url: (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_3__.generateUploadThingURL)(`/api/pollUpload/${key}`),\n            apiKey: opts.utRequestHeaders[\"x-uploadthing-api-key\"],\n            sdkVersion: _chunk_ECKEB4E7_mjs__WEBPACK_IMPORTED_MODULE_2__.UPLOADTHING_VERSION\n        });\n        return {\n            key,\n            url: fileUrl,\n            name: file.name,\n            size: file.size\n        };\n    }));\n    return uploads.map((upload)=>{\n        if (upload.status === \"fulfilled\") {\n            const data2 = upload.value;\n            return {\n                data: data2,\n                error: null\n            };\n        }\n        const reason = upload.reason;\n        const error = _uploadthing_shared__WEBPACK_IMPORTED_MODULE_3__.UploadThingError.toObject(reason);\n        return {\n            data: null,\n            error\n        };\n    });\n};\n// src/sdk/index.ts\nvar UTApi = class {\n    constructor(opts){\n        this.fetch = (opts == null ? void 0 : opts.fetch) ?? globalThis.fetch;\n        this.apiKey = (opts == null ? void 0 : opts.apiKey) ?? process.env.UPLOADTHING_SECRET;\n        this.defaultHeaders = {\n            \"Content-Type\": \"application/json\",\n            \"x-uploadthing-api-key\": this.apiKey,\n            \"x-uploadthing-version\": _chunk_ECKEB4E7_mjs__WEBPACK_IMPORTED_MODULE_2__.UPLOADTHING_VERSION\n        };\n        guardServerOnly();\n        getApiKeyOrThrow(this.apiKey);\n        (0,_chunk_WPSY3MFJ_mjs__WEBPACK_IMPORTED_MODULE_1__.incompatibleNodeGuard)();\n    }\n    async requestUploadThing(pathname, body, fallbackErrorMessage) {\n        const res = await this.fetch((0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_3__.generateUploadThingURL)(pathname), {\n            method: \"POST\",\n            cache: \"no-store\",\n            headers: this.defaultHeaders,\n            body: JSON.stringify(body)\n        });\n        const json = await res.json();\n        if (!res.ok || \"error\" in json) {\n            console.error(\"[UT] Error:\", json);\n            throw new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_3__.UploadThingError({\n                code: \"INTERNAL_SERVER_ERROR\",\n                message: \"error\" in json && typeof json.error === \"string\" ? json.error : fallbackErrorMessage\n            });\n        }\n        return json;\n    }\n    /**\n   * @param {FileEsque | FileEsque[]} files The file(s) to upload\n   * @param {Json} metadata JSON-parseable metadata to attach to the uploaded file(s)\n   *\n   * @example\n   * await uploadFiles(new File([\"foo\"], \"foo.txt\"));\n   *\n   * @example\n   * await uploadFiles([\n   *   new File([\"foo\"], \"foo.txt\"),\n   *   new File([\"bar\"], \"bar.txt\"),\n   * ]);\n   */ async uploadFiles(files, opts) {\n        guardServerOnly();\n        const filesToUpload = Array.isArray(files) ? files : [\n            files\n        ];\n        const uploads = await uploadFilesInternal({\n            files: filesToUpload,\n            metadata: (opts == null ? void 0 : opts.metadata) ?? {},\n            contentDisposition: (opts == null ? void 0 : opts.contentDisposition) ?? \"inline\"\n        }, {\n            fetch: this.fetch,\n            utRequestHeaders: this.defaultHeaders\n        });\n        const uploadFileResponse = Array.isArray(files) ? uploads : uploads[0];\n        return uploadFileResponse;\n    }\n    /**\n   * @param {string} url The URL of the file to upload\n   * @param {Json} metadata JSON-parseable metadata to attach to the uploaded file(s)\n   *\n   * @example\n   * await uploadFileFromUrl(\"https://uploadthing.com/f/2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg\");\n   *\n   * @example\n   * await uploadFileFromUrl([\n   *   \"https://uploadthing.com/f/2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg\",\n   *   \"https://uploadthing.com/f/1649353b-04ea-48a2-9db7-31de7f562c8d_image2.jpg\"\n   * ])\n   */ async uploadFilesFromUrl(urls, opts) {\n        guardServerOnly();\n        const fileUrls = Array.isArray(urls) ? urls : [\n            urls\n        ];\n        const formData = new FormData();\n        formData.append(\"metadata\", JSON.stringify((opts == null ? void 0 : opts.metadata) ?? {}));\n        const filesToUpload = await Promise.all(fileUrls.map(async (url)=>{\n            if (typeof url === \"string\") url = new URL(url);\n            const filename = url.pathname.split(\"/\").pop() ?? \"unknown-filename\";\n            const fileResponse = await fetch(url);\n            if (!fileResponse.ok) {\n                throw new _uploadthing_shared__WEBPACK_IMPORTED_MODULE_3__.UploadThingError({\n                    code: \"BAD_REQUEST\",\n                    message: \"Failed to download requested file.\",\n                    cause: fileResponse\n                });\n            }\n            const blob = await fileResponse.blob();\n            return Object.assign(blob, {\n                name: filename\n            });\n        }));\n        const uploads = await uploadFilesInternal({\n            files: filesToUpload,\n            metadata: (opts == null ? void 0 : opts.metadata) ?? {},\n            contentDisposition: (opts == null ? void 0 : opts.contentDisposition) ?? \"inline\"\n        }, {\n            fetch: this.fetch,\n            utRequestHeaders: this.defaultHeaders\n        });\n        const uploadFileResponse = Array.isArray(urls) ? uploads : uploads[0];\n        return uploadFileResponse;\n    }\n    /**\n   * Request to delete files from UploadThing storage.\n   * @param {string | string[]} fileKeys\n   *\n   * @example\n   * await deleteFiles(\"2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg\");\n   *\n   * @example\n   * await deleteFiles([\"2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg\",\"1649353b-04ea-48a2-9db7-31de7f562c8d_image2.jpg\"])\n   */ async deleteFiles(fileKeys) {\n        guardServerOnly();\n        if (!Array.isArray(fileKeys)) fileKeys = [\n            fileKeys\n        ];\n        return this.requestUploadThing(\"/api/deleteFile\", {\n            fileKeys\n        }, \"An unknown error occured while deleting files.\");\n    }\n    /**\n   * Request file URLs from UploadThing storage.\n   * @param {string | string[]} fileKeys\n   *\n   * @example\n   * const data = await getFileUrls(\"2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg\");\n   * console.log(data); // [{key: \"2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg\", url: \"https://uploadthing.com/f/2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg\"}]\n   *\n   * @example\n   * const data = await getFileUrls([\"2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg\",\"1649353b-04ea-48a2-9db7-31de7f562c8d_image2.jpg\"])\n   * console.log(data) // [{key: \"2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg\", url: \"https://uploadthing.com/f/2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg\" },{key: \"1649353b-04ea-48a2-9db7-31de7f562c8d_image2.jpg\", url: \"https://uploadthing.com/f/1649353b-04ea-48a2-9db7-31de7f562c8d_image2.jpg\"}]\n   */ async getFileUrls(fileKeys) {\n        guardServerOnly();\n        if (!Array.isArray(fileKeys)) fileKeys = [\n            fileKeys\n        ];\n        const json = await this.requestUploadThing(\"/api/getFileUrl\", {\n            fileKeys\n        }, \"An unknown error occured while retrieving file URLs.\");\n        return json.data;\n    }\n    /**\n   * Request file list from UploadThing storage.\n   *\n   * @example\n   * const data = await listFiles();\n   * console.log(data); // { key: \"2e0fdb64-9957-4262-8e45-f372ba903ac8_image.jpg\", id: \"2e0fdb64-9957-4262-8e45-f372ba903ac8\" }\n   */ async listFiles() {\n        guardServerOnly();\n        const json = await this.requestUploadThing(\"/api/listFiles\", {}, \"An unknown error occured while listing files.\");\n        return json.files;\n    }\n    async renameFile(updates) {\n        guardServerOnly();\n        if (!Array.isArray(updates)) updates = [\n            updates\n        ];\n        return this.requestUploadThing(\"/api/renameFile\", {\n            updates\n        }, \"An unknown error occured while renaming files.\");\n    }\n    async getUsageInfo() {\n        guardServerOnly();\n        return this.requestUploadThing(\"/api/getUsageInfo\", {}, \"An unknown error occured while getting usage info.\");\n    }\n};\n// src/server.ts\nvar createUploadthing = (opts)=>(0,_chunk_ECKEB4E7_mjs__WEBPACK_IMPORTED_MODULE_2__.createBuilder)(opts);\nvar createServerHandler = (opts)=>{\n    (0,_chunk_WPSY3MFJ_mjs__WEBPACK_IMPORTED_MODULE_1__.incompatibleNodeGuard)();\n    const requestHandler = (0,_chunk_ECKEB4E7_mjs__WEBPACK_IMPORTED_MODULE_2__.buildRequestHandler)(opts);\n    const POST = async (request)=>{\n        const req = request instanceof Request ? request : request.request;\n        const response = await requestHandler({\n            req\n        });\n        if (response instanceof _uploadthing_shared__WEBPACK_IMPORTED_MODULE_3__.UploadThingError) {\n            return new Response(JSON.stringify((0,_chunk_ECKEB4E7_mjs__WEBPACK_IMPORTED_MODULE_2__.formatError)(response, opts.router)), {\n                status: (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_3__.getStatusCodeFromError)(response),\n                headers: {\n                    \"x-uploadthing-version\": _chunk_ECKEB4E7_mjs__WEBPACK_IMPORTED_MODULE_2__.UPLOADTHING_VERSION\n                }\n            });\n        }\n        if (response.status !== 200) {\n            return new Response(\"An unknown error occured\", {\n                status: 500,\n                headers: {\n                    \"x-uploadthing-version\": _chunk_ECKEB4E7_mjs__WEBPACK_IMPORTED_MODULE_2__.UPLOADTHING_VERSION\n                }\n            });\n        }\n        return new Response(JSON.stringify(response.body), {\n            status: response.status,\n            headers: {\n                \"x-uploadthing-version\": _chunk_ECKEB4E7_mjs__WEBPACK_IMPORTED_MODULE_2__.UPLOADTHING_VERSION\n            }\n        });\n    };\n    const getBuildPerms = (0,_chunk_ECKEB4E7_mjs__WEBPACK_IMPORTED_MODULE_2__.buildPermissionsInfoHandler)(opts);\n    const GET = (request)=>{\n        const _req = request instanceof Request ? request : request.request;\n        return new Response(JSON.stringify(getBuildPerms()), {\n            status: 200,\n            headers: {\n                \"x-uploadthing-version\": _chunk_ECKEB4E7_mjs__WEBPACK_IMPORTED_MODULE_2__.UPLOADTHING_VERSION\n            }\n        });\n    };\n    return {\n        GET,\n        POST\n    };\n};\nvar extractRouterConfig = (router)=>(0,_chunk_ECKEB4E7_mjs__WEBPACK_IMPORTED_MODULE_2__.buildPermissionsInfoHandler)({\n        router\n    })();\n //# sourceMappingURL=chunk-SYW7QG4P.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/uploadthing/dist/chunk-SYW7QG4P.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/uploadthing/dist/chunk-WPSY3MFJ.mjs":
/*!**********************************************************!*\
  !*** ./node_modules/uploadthing/dist/chunk-WPSY3MFJ.mjs ***!
  \**********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   incompatibleNodeGuard: () => (/* binding */ incompatibleNodeGuard)\n/* harmony export */ });\n// src/internal/incompat-node-guard.ts\nfunction incompatibleNodeGuard() {\n    var _a, _b, _c, _d;\n    if (typeof process === \"undefined\") return;\n    let major;\n    let minor;\n    const maybeNodeVersion = (_b = (_a = process.versions) == null ? void 0 : _a.node) == null ? void 0 : _b.split(\".\");\n    if (maybeNodeVersion) {\n        [major, minor] = maybeNodeVersion.map((v)=>parseInt(v, 10));\n    }\n    const maybeNodePath = (_c = process.env) == null ? void 0 : _c.NODE;\n    if (!major && maybeNodePath) {\n        const nodeVersion = (_d = /v(\\d+)\\.(\\d+)\\.(\\d+)/.exec(maybeNodePath)) == null ? void 0 : _d[0];\n        if (nodeVersion) {\n            [major, minor] = nodeVersion.substring(1).split(\".\").map((v)=>parseInt(v, 10));\n        }\n    }\n    if (!major || !minor) return;\n    if (major > 18) return;\n    if (major === 18 && minor >= 13) return;\n    console.error(`[UT]: YOU ARE USING A LEGACY (${major}.${minor}) NODE VERSION WHICH ISN'T OFFICIALLY SUPPORTED. PLEASE UPGRADE TO NODE ^18.13.`);\n    process.exit(1);\n}\n //# sourceMappingURL=chunk-WPSY3MFJ.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvdXBsb2FkdGhpbmcvZGlzdC9jaHVuay1XUFNZM01GSi5tanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBLHNDQUFzQztBQUN0QyxTQUFTQTtJQUNQLElBQUlDLElBQUlDLElBQUlDLElBQUlDO0lBQ2hCLElBQUksT0FBT0MsWUFBWSxhQUNyQjtJQUNGLElBQUlDO0lBQ0osSUFBSUM7SUFDSixNQUFNQyxtQkFBbUIsQ0FBQ04sS0FBSyxDQUFDRCxLQUFLSSxRQUFRSSxRQUFRLEtBQUssT0FBTyxLQUFLLElBQUlSLEdBQUdTLElBQUksS0FBSyxPQUFPLEtBQUssSUFBSVIsR0FBR1MsS0FBSyxDQUFDO0lBQy9HLElBQUlILGtCQUFrQjtRQUNwQixDQUFDRixPQUFPQyxNQUFNLEdBQUdDLGlCQUFpQkksR0FBRyxDQUFDLENBQUNDLElBQU1DLFNBQVNELEdBQUc7SUFDM0Q7SUFDQSxNQUFNRSxnQkFBZ0IsQ0FBQ1osS0FBS0UsUUFBUVcsR0FBRyxLQUFLLE9BQU8sS0FBSyxJQUFJYixHQUFHYyxJQUFJO0lBQ25FLElBQUksQ0FBQ1gsU0FBU1MsZUFBZTtRQUMzQixNQUFNRyxjQUFjLENBQUNkLEtBQUssdUJBQXVCZSxJQUFJLENBQUNKLGNBQWEsS0FBTSxPQUFPLEtBQUssSUFBSVgsRUFBRSxDQUFDLEVBQUU7UUFDOUYsSUFBSWMsYUFBYTtZQUNmLENBQUNaLE9BQU9DLE1BQU0sR0FBR1csWUFBWUUsU0FBUyxDQUFDLEdBQUdULEtBQUssQ0FBQyxLQUFLQyxHQUFHLENBQUMsQ0FBQ0MsSUFBTUMsU0FBU0QsR0FBRztRQUM5RTtJQUNGO0lBQ0EsSUFBSSxDQUFDUCxTQUFTLENBQUNDLE9BQ2I7SUFDRixJQUFJRCxRQUFRLElBQ1Y7SUFDRixJQUFJQSxVQUFVLE1BQU1DLFNBQVMsSUFDM0I7SUFDRmMsUUFBUUMsS0FBSyxDQUNYLENBQUMsOEJBQThCLEVBQUVoQixNQUFNLENBQUMsRUFBRUMsTUFBTSwrRUFBK0UsQ0FBQztJQUVsSUYsUUFBUWtCLElBQUksQ0FBQztBQUNmO0FBSUUsQ0FDRiwyQ0FBMkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ibG9nZ2luZy1hcHAvLi9ub2RlX21vZHVsZXMvdXBsb2FkdGhpbmcvZGlzdC9jaHVuay1XUFNZM01GSi5tanM/N2I1NCJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBzcmMvaW50ZXJuYWwvaW5jb21wYXQtbm9kZS1ndWFyZC50c1xuZnVuY3Rpb24gaW5jb21wYXRpYmxlTm9kZUd1YXJkKCkge1xuICB2YXIgX2EsIF9iLCBfYywgX2Q7XG4gIGlmICh0eXBlb2YgcHJvY2VzcyA9PT0gXCJ1bmRlZmluZWRcIilcbiAgICByZXR1cm47XG4gIGxldCBtYWpvcjtcbiAgbGV0IG1pbm9yO1xuICBjb25zdCBtYXliZU5vZGVWZXJzaW9uID0gKF9iID0gKF9hID0gcHJvY2Vzcy52ZXJzaW9ucykgPT0gbnVsbCA/IHZvaWQgMCA6IF9hLm5vZGUpID09IG51bGwgPyB2b2lkIDAgOiBfYi5zcGxpdChcIi5cIik7XG4gIGlmIChtYXliZU5vZGVWZXJzaW9uKSB7XG4gICAgW21ham9yLCBtaW5vcl0gPSBtYXliZU5vZGVWZXJzaW9uLm1hcCgodikgPT4gcGFyc2VJbnQodiwgMTApKTtcbiAgfVxuICBjb25zdCBtYXliZU5vZGVQYXRoID0gKF9jID0gcHJvY2Vzcy5lbnYpID09IG51bGwgPyB2b2lkIDAgOiBfYy5OT0RFO1xuICBpZiAoIW1ham9yICYmIG1heWJlTm9kZVBhdGgpIHtcbiAgICBjb25zdCBub2RlVmVyc2lvbiA9IChfZCA9IC92KFxcZCspXFwuKFxcZCspXFwuKFxcZCspLy5leGVjKG1heWJlTm9kZVBhdGgpKSA9PSBudWxsID8gdm9pZCAwIDogX2RbMF07XG4gICAgaWYgKG5vZGVWZXJzaW9uKSB7XG4gICAgICBbbWFqb3IsIG1pbm9yXSA9IG5vZGVWZXJzaW9uLnN1YnN0cmluZygxKS5zcGxpdChcIi5cIikubWFwKCh2KSA9PiBwYXJzZUludCh2LCAxMCkpO1xuICAgIH1cbiAgfVxuICBpZiAoIW1ham9yIHx8ICFtaW5vcilcbiAgICByZXR1cm47XG4gIGlmIChtYWpvciA+IDE4KVxuICAgIHJldHVybjtcbiAgaWYgKG1ham9yID09PSAxOCAmJiBtaW5vciA+PSAxMylcbiAgICByZXR1cm47XG4gIGNvbnNvbGUuZXJyb3IoXG4gICAgYFtVVF06IFlPVSBBUkUgVVNJTkcgQSBMRUdBQ1kgKCR7bWFqb3J9LiR7bWlub3J9KSBOT0RFIFZFUlNJT04gV0hJQ0ggSVNOJ1QgT0ZGSUNJQUxMWSBTVVBQT1JURUQuIFBMRUFTRSBVUEdSQURFIFRPIE5PREUgXjE4LjEzLmBcbiAgKTtcbiAgcHJvY2Vzcy5leGl0KDEpO1xufVxuXG5leHBvcnQge1xuICBpbmNvbXBhdGlibGVOb2RlR3VhcmRcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jaHVuay1XUFNZM01GSi5tanMubWFwIl0sIm5hbWVzIjpbImluY29tcGF0aWJsZU5vZGVHdWFyZCIsIl9hIiwiX2IiLCJfYyIsIl9kIiwicHJvY2VzcyIsIm1ham9yIiwibWlub3IiLCJtYXliZU5vZGVWZXJzaW9uIiwidmVyc2lvbnMiLCJub2RlIiwic3BsaXQiLCJtYXAiLCJ2IiwicGFyc2VJbnQiLCJtYXliZU5vZGVQYXRoIiwiZW52IiwiTk9ERSIsIm5vZGVWZXJzaW9uIiwiZXhlYyIsInN1YnN0cmluZyIsImNvbnNvbGUiLCJlcnJvciIsImV4aXQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/uploadthing/dist/chunk-WPSY3MFJ.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/uploadthing/dist/next.mjs":
/*!************************************************!*\
  !*** ./node_modules/uploadthing/dist/next.mjs ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createNextRouteHandler: () => (/* binding */ createNextRouteHandler),\n/* harmony export */   createUploadthing: () => (/* binding */ createUploadthing)\n/* harmony export */ });\n/* harmony import */ var _chunk_SYW7QG4P_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./chunk-SYW7QG4P.mjs */ \"(rsc)/./node_modules/uploadthing/dist/chunk-SYW7QG4P.mjs\");\n/* harmony import */ var _chunk_J63ZFLAK_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./chunk-J63ZFLAK.mjs */ \"(rsc)/./node_modules/uploadthing/dist/chunk-J63ZFLAK.mjs\");\n/* harmony import */ var _chunk_WPSY3MFJ_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./chunk-WPSY3MFJ.mjs */ \"(rsc)/./node_modules/uploadthing/dist/chunk-WPSY3MFJ.mjs\");\n/* harmony import */ var _chunk_ECKEB4E7_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./chunk-ECKEB4E7.mjs */ \"(rsc)/./node_modules/uploadthing/dist/chunk-ECKEB4E7.mjs\");\n\n\n\n\n// src/next.ts\nvar createUploadthing = (opts)=>(0,_chunk_ECKEB4E7_mjs__WEBPACK_IMPORTED_MODULE_3__.createBuilder)(opts);\nvar createNextRouteHandler = (opts)=>{\n    const handlers = (0,_chunk_SYW7QG4P_mjs__WEBPACK_IMPORTED_MODULE_0__.createServerHandler)(opts);\n    return {\n        POST: (req)=>handlers.POST(req),\n        GET: (req)=>handlers.GET(req)\n    };\n};\n //# sourceMappingURL=next.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvdXBsb2FkdGhpbmcvZGlzdC9uZXh0Lm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFFOEI7QUFDQTtBQUNBO0FBR0E7QUFFOUIsY0FBYztBQUNkLElBQUlFLG9CQUFvQixDQUFDQyxPQUFTRixrRUFBYUEsQ0FBQ0U7QUFDaEQsSUFBSUMseUJBQXlCLENBQUNEO0lBQzVCLE1BQU1FLFdBQVdMLHdFQUFtQkEsQ0FBQ0c7SUFDckMsT0FBTztRQUNMRyxNQUFNLENBQUNDLE1BQVFGLFNBQVNDLElBQUksQ0FBQ0M7UUFDN0JDLEtBQUssQ0FBQ0QsTUFBUUYsU0FBU0csR0FBRyxDQUFDRDtJQUM3QjtBQUNGO0FBSUUsQ0FDRixpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ibG9nZ2luZy1hcHAvLi9ub2RlX21vZHVsZXMvdXBsb2FkdGhpbmcvZGlzdC9uZXh0Lm1qcz9jNTVmIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIGNyZWF0ZVNlcnZlckhhbmRsZXJcbn0gZnJvbSBcIi4vY2h1bmstU1lXN1FHNFAubWpzXCI7XG5pbXBvcnQgXCIuL2NodW5rLUo2M1pGTEFLLm1qc1wiO1xuaW1wb3J0IFwiLi9jaHVuay1XUFNZM01GSi5tanNcIjtcbmltcG9ydCB7XG4gIGNyZWF0ZUJ1aWxkZXJcbn0gZnJvbSBcIi4vY2h1bmstRUNLRUI0RTcubWpzXCI7XG5cbi8vIHNyYy9uZXh0LnRzXG52YXIgY3JlYXRlVXBsb2FkdGhpbmcgPSAob3B0cykgPT4gY3JlYXRlQnVpbGRlcihvcHRzKTtcbnZhciBjcmVhdGVOZXh0Um91dGVIYW5kbGVyID0gKG9wdHMpID0+IHtcbiAgY29uc3QgaGFuZGxlcnMgPSBjcmVhdGVTZXJ2ZXJIYW5kbGVyKG9wdHMpO1xuICByZXR1cm4ge1xuICAgIFBPU1Q6IChyZXEpID0+IGhhbmRsZXJzLlBPU1QocmVxKSxcbiAgICBHRVQ6IChyZXEpID0+IGhhbmRsZXJzLkdFVChyZXEpXG4gIH07XG59O1xuZXhwb3J0IHtcbiAgY3JlYXRlTmV4dFJvdXRlSGFuZGxlcixcbiAgY3JlYXRlVXBsb2FkdGhpbmdcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1uZXh0Lm1qcy5tYXAiXSwibmFtZXMiOlsiY3JlYXRlU2VydmVySGFuZGxlciIsImNyZWF0ZUJ1aWxkZXIiLCJjcmVhdGVVcGxvYWR0aGluZyIsIm9wdHMiLCJjcmVhdGVOZXh0Um91dGVIYW5kbGVyIiwiaGFuZGxlcnMiLCJQT1NUIiwicmVxIiwiR0VUIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/uploadthing/dist/next.mjs\n");

/***/ })

};
;